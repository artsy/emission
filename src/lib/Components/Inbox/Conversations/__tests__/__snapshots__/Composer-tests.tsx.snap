// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`looks correct when rendered 1`] = `
<View
  onLayout={[Function]}
  style={
    Array [
      Array [
        Object {
          "alignSelf": "center",
          "flexBasis": 0,
          "flexGrow": 1,
          "flexShrink": 1,
          "width": 708,
        },
        undefined,
      ],
      Object {
        "paddingBottom": 0,
      },
    ]
  }
>
  <View
    active={false}
    style={
      Array [
        Object {
          "alignItems": "center",
          "backgroundColor": "#f8f8f8",
          "borderColor": "#e5e5e5",
          "borderRadius": 3,
          "borderWidth": 1,
          "flexDirection": "row",
          "justifyContent": "space-between",
          "marginBottom": 20,
          "marginLeft": 20,
          "marginRight": 20,
          "marginTop": 0,
        },
        undefined,
      ]
    }
  >
    <TextInput
      allowFontScaling={true}
      autoFocus={false}
      keyboardAppearance="dark"
      multiline={true}
      onChangeText={[Function]}
      onEndEditing={[Function]}
      onFocus={[Function]}
      placeholder="Reply..."
      placeholderTextColor="#666666"
      style={
        Object {
          "flex": 1,
          "fontFamily": "AGaramondPro-Regular",
          "fontSize": 13,
          "paddingBottom": 10,
          "paddingLeft": 10,
          "paddingRight": 10,
          "paddingTop": 13,
        }
      }
      underlineColorAndroid="transparent"
      value={null}
    />
    <Text
      accessible={true}
      disabled={true}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Array [
          Object {
            "color": "#e5e5e5",
            "fontFamily": "AvantGardeGothicITC",
            "fontSize": 12,
            "marginRight": 10,
          },
          undefined,
        ]
      }
    >
      SEND
    </Text>
  </View>
</View>
`;

exports[`regarding the send button disables it even if it contains text if the disabled prop is true 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Composer
    disabled={true}
    tracking={
      Object {
        "getTrackingData": [Function],
        "trackEvent": [Function],
      }
    }
    value="History repeats itself, first as tragedy, second as farce."
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "behavior": "padding",
      "children": Array [
        undefined,
        <Styled(View)
          active={false}
        >
          <TextInput
            allowFontScaling={true}
            autoFocus={false}
            keyboardAppearance="dark"
            multiline={true}
            onChangeText={[Function]}
            onEndEditing={[Function]}
            onFocus={[Function]}
            placeholder="Reply..."
            placeholderTextColor="#666666"
            style={
              Object {
                "flex": 1,
                "fontFamily": "AGaramondPro-Regular",
                "fontSize": 13,
                "paddingBottom": 10,
                "paddingLeft": 10,
                "paddingRight": 10,
                "paddingTop": 13,
              }
            }
            underlineColorAndroid="transparent"
            value="History repeats itself, first as tragedy, second as farce."
          />
          <TouchableWithoutFeedback
            disabled={true}
            onPress={[Function]}
          >
            <Styled(Text)
              disabled={true}
            >
              SEND
            </Styled(Text)>
          </TouchableWithoutFeedback>
        </Styled(View)>,
      ],
      "keyboardVerticalOffset": 20,
    },
    "ref": null,
    "rendered": Array [
      undefined,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "active": false,
          "children": Array [
            <TextInput
              allowFontScaling={true}
              autoFocus={false}
              keyboardAppearance="dark"
              multiline={true}
              onChangeText={[Function]}
              onEndEditing={[Function]}
              onFocus={[Function]}
              placeholder="Reply..."
              placeholderTextColor="#666666"
              style={
                Object {
                  "flex": 1,
                  "fontFamily": "AGaramondPro-Regular",
                  "fontSize": 13,
                  "paddingBottom": 10,
                  "paddingLeft": 10,
                  "paddingRight": 10,
                  "paddingTop": 13,
                }
              }
              underlineColorAndroid="transparent"
              value="History repeats itself, first as tragedy, second as farce."
            />,
            <TouchableWithoutFeedback
              disabled={true}
              onPress={[Function]}
            >
              <Styled(Text)
                disabled={true}
              >
                SEND
              </Styled(Text)>
            </TouchableWithoutFeedback>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "allowFontScaling": true,
              "autoFocus": false,
              "keyboardAppearance": "dark",
              "multiline": true,
              "onChangeText": [Function],
              "onEndEditing": [Function],
              "onFocus": [Function],
              "placeholder": "Reply...",
              "placeholderTextColor": "#666666",
              "style": Object {
                "flex": 1,
                "fontFamily": "AGaramondPro-Regular",
                "fontSize": 13,
                "paddingBottom": 10,
                "paddingLeft": 10,
                "paddingRight": 10,
                "paddingTop": 13,
              },
              "underlineColorAndroid": "transparent",
              "value": "History repeats itself, first as tragedy, second as farce.",
            },
            "ref": [Function],
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Styled(Text)
                disabled={true}
              >
                SEND
              </Styled(Text)>,
              "disabled": true,
              "onPress": [Function],
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "SEND",
                "disabled": true,
              },
              "ref": null,
              "rendered": "SEND",
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "behavior": "padding",
        "children": Array [
          undefined,
          <Styled(View)
            active={false}
          >
            <TextInput
              allowFontScaling={true}
              autoFocus={false}
              keyboardAppearance="dark"
              multiline={true}
              onChangeText={[Function]}
              onEndEditing={[Function]}
              onFocus={[Function]}
              placeholder="Reply..."
              placeholderTextColor="#666666"
              style={
                Object {
                  "flex": 1,
                  "fontFamily": "AGaramondPro-Regular",
                  "fontSize": 13,
                  "paddingBottom": 10,
                  "paddingLeft": 10,
                  "paddingRight": 10,
                  "paddingTop": 13,
                }
              }
              underlineColorAndroid="transparent"
              value="History repeats itself, first as tragedy, second as farce."
            />
            <TouchableWithoutFeedback
              disabled={true}
              onPress={[Function]}
            >
              <Styled(Text)
                disabled={true}
              >
                SEND
              </Styled(Text)>
            </TouchableWithoutFeedback>
          </Styled(View)>,
        ],
        "keyboardVerticalOffset": 20,
      },
      "ref": null,
      "rendered": Array [
        undefined,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "active": false,
            "children": Array [
              <TextInput
                allowFontScaling={true}
                autoFocus={false}
                keyboardAppearance="dark"
                multiline={true}
                onChangeText={[Function]}
                onEndEditing={[Function]}
                onFocus={[Function]}
                placeholder="Reply..."
                placeholderTextColor="#666666"
                style={
                  Object {
                    "flex": 1,
                    "fontFamily": "AGaramondPro-Regular",
                    "fontSize": 13,
                    "paddingBottom": 10,
                    "paddingLeft": 10,
                    "paddingRight": 10,
                    "paddingTop": 13,
                  }
                }
                underlineColorAndroid="transparent"
                value="History repeats itself, first as tragedy, second as farce."
              />,
              <TouchableWithoutFeedback
                disabled={true}
                onPress={[Function]}
              >
                <Styled(Text)
                  disabled={true}
                >
                  SEND
                </Styled(Text)>
              </TouchableWithoutFeedback>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "allowFontScaling": true,
                "autoFocus": false,
                "keyboardAppearance": "dark",
                "multiline": true,
                "onChangeText": [Function],
                "onEndEditing": [Function],
                "onFocus": [Function],
                "placeholder": "Reply...",
                "placeholderTextColor": "#666666",
                "style": Object {
                  "flex": 1,
                  "fontFamily": "AGaramondPro-Regular",
                  "fontSize": 13,
                  "paddingBottom": 10,
                  "paddingLeft": 10,
                  "paddingRight": 10,
                  "paddingTop": 13,
                },
                "underlineColorAndroid": "transparent",
                "value": "History repeats itself, first as tragedy, second as farce.",
              },
              "ref": [Function],
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Styled(Text)
                  disabled={true}
                >
                  SEND
                </Styled(Text)>,
                "disabled": true,
                "onPress": [Function],
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "SEND",
                  "disabled": true,
                },
                "ref": null,
                "rendered": "SEND",
                "type": [Function],
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`regarding the send button disables it when there is no text 1`] = `
<View
  onLayout={[Function]}
  style={
    Array [
      Array [
        Object {
          "alignSelf": "center",
          "flexBasis": 0,
          "flexGrow": 1,
          "flexShrink": 1,
          "width": 708,
        },
        undefined,
      ],
      Object {
        "paddingBottom": 0,
      },
    ]
  }
>
  <View
    active={false}
    style={
      Array [
        Object {
          "alignItems": "center",
          "backgroundColor": "#f8f8f8",
          "borderColor": "#e5e5e5",
          "borderRadius": 3,
          "borderWidth": 1,
          "flexDirection": "row",
          "justifyContent": "space-between",
          "marginBottom": 20,
          "marginLeft": 20,
          "marginRight": 20,
          "marginTop": 0,
        },
        undefined,
      ]
    }
  >
    <TextInput
      allowFontScaling={true}
      autoFocus={false}
      keyboardAppearance="dark"
      multiline={true}
      onChangeText={[Function]}
      onEndEditing={[Function]}
      onFocus={[Function]}
      placeholder="Reply..."
      placeholderTextColor="#666666"
      style={
        Object {
          "flex": 1,
          "fontFamily": "AGaramondPro-Regular",
          "fontSize": 13,
          "paddingBottom": 10,
          "paddingLeft": 10,
          "paddingRight": 10,
          "paddingTop": 13,
        }
      }
      underlineColorAndroid="transparent"
      value={null}
    />
    <Text
      accessible={true}
      disabled={true}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Array [
          Object {
            "color": "#e5e5e5",
            "fontFamily": "AvantGardeGothicITC",
            "fontSize": 12,
            "marginRight": 10,
          },
          undefined,
        ]
      }
    >
      SEND
    </Text>
  </View>
</View>
`;
