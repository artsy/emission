type AggregationCount {
  __id: ID!
  id: String!
  name: String
  count: Int
}

type Article implements Node {
  __id: ID!
  id: String!
  cached: Int
  title: String
  published_at(format: String): String
  updated_at(format: String): String
  thumbnail_title: String
  thumbnail_teaser: String
  author: Author
  thumbnail_image: Image
  slug: String
  href: String
}

enum ArticleSorts {
  PUBLISHED_AT_ASC
  PUBLISHED_AT_DESC
}

type Artist implements Node {
  __id: ID!
  id: String!
  _id: String!
  cached: Int
  href: String
  sortable_id: String
  name: String
  initials(length: Int = 3): String
  gender: String
  years: String
  is_public: Boolean
  is_consignable: Boolean
  public: Boolean
  consignable: Boolean
  is_display_auction_link: Boolean
  display_auction_link: Boolean
  has_metadata: Boolean
  hometown: String
  location: String
  nationality: String
  birthday: String
  deathday: String
  formatted_nationality_and_birthday: String
  biography: Article
  alternate_names: [String]
  meta: ArtistMeta
  blurb(format: Format): String
  biography_blurb(format: Format): ArtistBlurb
  is_shareable: Boolean
  bio: String
  counts: ArtistCounts
  artworks(size: Int, page: Int, sort: ArtworkSorts, published: Boolean = true, filter: [ArtistArtworksFilters], exclude: [String]): [Artwork]
  formatted_artworks_count: String
  image: Image
  artists(size: Int, exclude_artists_without_artworks: Boolean = true): [Artist]
  contemporary(size: Int, exclude_artists_without_artworks: Boolean = true): [Artist]
  carousel: ArtistCarousel
  statuses: ArtistStatuses
  exhibition_highlights(size: Int = 5): [PartnerShow]
  partner_shows(at_a_fair: Boolean, active: Boolean, status: String, size: Int, solo_show: Boolean, top_tier: Boolean, sort: PartnerShowSorts): [PartnerShow]
  partner_artists(size: Int): [PartnerArtist]
  sales(live: Boolean, is_auction: Boolean, size: Int, sort: SaleSorts): [Sale]
  articles(sort: ArticleSorts, limit: Int): [Article]
}

enum ArtistArtworksFilters {
  IS_FOR_SALE
  IS_NOT_FOR_SALE
}

type ArtistBlurb {
  text: String
  credit: String
}

type ArtistCarousel {
  images: [Image]
}

type ArtistCounts {
  artworks(format: String, label: String): FormattedNumber
  follows(format: String, label: String): FormattedNumber
  for_sale_artworks(format: String, label: String): FormattedNumber
  partner_shows(format: String, label: String): FormattedNumber
  related_artists(format: String, label: String): FormattedNumber
  articles(format: String, label: String): FormattedNumber
}

type ArtistItem implements Node {
  __id: ID!
  id: String!
  _id: String!
  cached: Int
  href: String
  sortable_id: String
  name: String
  initials(length: Int = 3): String
  gender: String
  years: String
  is_public: Boolean
  is_consignable: Boolean
  public: Boolean
  consignable: Boolean
  is_display_auction_link: Boolean
  display_auction_link: Boolean
  has_metadata: Boolean
  hometown: String
  location: String
  nationality: String
  birthday: String
  deathday: String
  formatted_nationality_and_birthday: String
  biography: Article
  alternate_names: [String]
  meta: ArtistMeta
  blurb(format: Format): String
  biography_blurb(format: Format): ArtistBlurb
  is_shareable: Boolean
  bio: String
  counts: ArtistCounts
  artworks(size: Int, page: Int, sort: ArtworkSorts, published: Boolean = true, filter: [ArtistArtworksFilters], exclude: [String]): [Artwork]
  formatted_artworks_count: String
  image: Image
  artists(size: Int, exclude_artists_without_artworks: Boolean = true): [Artist]
  contemporary(size: Int, exclude_artists_without_artworks: Boolean = true): [Artist]
  carousel: ArtistCarousel
  statuses: ArtistStatuses
  exhibition_highlights(size: Int = 5): [PartnerShow]
  partner_shows(at_a_fair: Boolean, active: Boolean, status: String, size: Int, solo_show: Boolean, top_tier: Boolean, sort: PartnerShowSorts): [PartnerShow]
  partner_artists(size: Int): [PartnerArtist]
  sales(live: Boolean, is_auction: Boolean, size: Int, sort: SaleSorts): [Sale]
  articles(sort: ArticleSorts, limit: Int): [Article]
}

type ArtistMeta {
  title: String
  description: String
}

type ArtistSearchEntity implements Node {
  __id: ID!
  id: String!
  _id: String!
  cached: Int
  href: String
  sortable_id: String
  name: String
  initials(length: Int = 3): String
  gender: String
  years: String
  is_public: Boolean
  is_consignable: Boolean
  public: Boolean
  consignable: Boolean
  is_display_auction_link: Boolean
  display_auction_link: Boolean
  has_metadata: Boolean
  hometown: String
  location: String
  nationality: String
  birthday: String
  deathday: String
  formatted_nationality_and_birthday: String
  biography: Article
  alternate_names: [String]
  meta: ArtistMeta
  blurb(format: Format): String
  biography_blurb(format: Format): ArtistBlurb
  is_shareable: Boolean
  bio: String
  counts: ArtistCounts
  artworks(size: Int, page: Int, sort: ArtworkSorts, published: Boolean = true, filter: [ArtistArtworksFilters], exclude: [String]): [Artwork]
  formatted_artworks_count: String
  image: Image
  artists(size: Int, exclude_artists_without_artworks: Boolean = true): [Artist]
  contemporary(size: Int, exclude_artists_without_artworks: Boolean = true): [Artist]
  carousel: ArtistCarousel
  statuses: ArtistStatuses
  exhibition_highlights(size: Int = 5): [PartnerShow]
  partner_shows(at_a_fair: Boolean, active: Boolean, status: String, size: Int, solo_show: Boolean, top_tier: Boolean, sort: PartnerShowSorts): [PartnerShow]
  partner_artists(size: Int): [PartnerArtist]
  sales(live: Boolean, is_auction: Boolean, size: Int, sort: SaleSorts): [Sale]
  articles(sort: ArticleSorts, limit: Int): [Article]
}

enum ArtistSorts {
  sortable_id_asc
  sortable_id_desc
  trending_desc
}

type ArtistStatuses {
  artworks: Boolean
  shows: Boolean
  cv: Boolean
  artists: Boolean
  contemporary: Boolean
  articles: Boolean
  auction_lots: Boolean
  biography: Boolean
}

type Artwork implements Node {
  __id: ID!
  id: String!
  _id: String!
  cached: Int
  to_s: String
  href: String
  title: String
  category: String
  medium: String
  date: String
  image_rights: String
  website: String
  collecting_institution: String
  partner(shallow: Boolean): Partner
  embed(width: Int = 853, height: Int = 450, autoplay: Boolean = false): String
  can_share_image: Boolean
  is_embeddable_video: Boolean
  is_shareable: Boolean
  is_hangable: Boolean
  is_inquireable: Boolean
  is_contactable: Boolean
  is_in_auction: Boolean
  is_in_show: Boolean
  is_for_sale: Boolean
  is_biddable: Boolean
  is_unique: Boolean
  is_sold: Boolean
  is_ecommerce: Boolean
  is_acquireable: Boolean
  is_buy_nowable: Boolean
  is_comparable_with_auction_results: Boolean
  is_downloadable: Boolean
  is_price_hidden: Boolean
  availability: String
  sale_message: String
  artist(shallow: Boolean): Artist
  contact_label: String
  cultural_maker: String
  artists(shallow: Boolean): [Artist]
  dimensions: dimensions
  image: Image
  images(size: Int): [Image]
  context: ArtworkContext
  highlights: [Highlighted]
  articles(size: Int): [Article]
  shows(size: Int, active: Boolean, at_a_fair: Boolean, sort: PartnerShowSorts): [PartnerShow]
  show(size: Int, active: Boolean, at_a_fair: Boolean, sort: PartnerShowSorts): PartnerShow
  sale_artwork: SaleArtwork
  sale: Sale
  fair: Fair
  edition_of: String
  edition_sets: [EditionSet]
  description(format: Format): String
  exhibition_history(format: Format): String
  provenance(format: Format): String
  signature(format: Format): String
  additional_information(format: Format): String
  literature(format: Format): String
  publisher(format: Format): String
  manufacturer(format: Format): String
  series(format: Format): String
  meta: ArtworkMeta
  layer(id: String): ArtworkLayer
  layers: [ArtworkLayer]
}

enum ArtworkAggregation {
  PRICE_RANGE
  DIMENSION_RANGE
  COLOR
  PERIOD
  MAJOR_PERIOD
  PARTNER_CITY
  MEDIUM
  GALLERY
  INSTITUTION
  TOTAL
  FOLLOWED_ARTISTS
  MERCHANDISABLE_ARTISTS
}

union ArtworkContext = ArtworkContextAuction | ArtworkContextSale | ArtworkContextFair | ArtworkContextPartnerShow

type ArtworkContextAuction {
  __id: ID!
  id: String!
  _id: String!
  cached: Int
  name: String
  href: String
  description: String
  sale_type: String
  is_auction: Boolean
  is_auction_promo: Boolean
  is_preview: Boolean
  is_open: Boolean
  is_live_open: Boolean
  is_closed: Boolean
  is_with_buyers_premium: Boolean
  auction_state: String
  status: String
  registration_ends_at(format: String): String
  start_at(format: String): String
  end_at(format: String): String
  live_start_at(format: String): String
  currency: String
  sale_artworks(page: Int = 1, size: Int = 25, all: Boolean = false): [SaleArtwork]
  artworks(page: Int = 1, size: Int = 25, all: Boolean = false, exclude: [String]): [Artwork]
  cover_image: Image
  sale_artwork(id: String!): SaleArtwork
  profile: Profile
  bid_increments: [BidIncrement]
  buyers_premium: [BuyersPremium]
}

type ArtworkContextFair {
  __id: ID!
  id: String!
  _id: String!
  cached: Int
  banner_size: String
  profile: Profile
  has_full_feature: Boolean
  href: String
  image: Image
  location: Location
  start_at(format: String): String
  end_at(format: String): String
  name: String
  tagline: String
  published: Boolean
  is_published: Boolean
  organizer: organizer
}

type ArtworkContextPartnerShow implements Node {
  __id: ID!
  id: String!
  _id: String!
  cached: Int
  href: String
  kind: String
  name: String
  description: String
  type: String
  displayable: Boolean
  is_active: Boolean
  is_displayable: Boolean
  is_fair_booth: Boolean
  press_release(format: Format): String
  start_at(format: String): String
  end_at(format: String): String
  exhibition_period: String
  artists: [Artist]
  partner: Partner
  fair: Fair
  location: Location
  status: String
  status_update(max_days: Int): String
  events: [PartnerShowEventType]
  counts: PartnerShowCounts
  artworks(size: Int = 25, published: Boolean = true, page: Int = 1, all: Boolean, exclude: [String]): [Artwork]
  meta_image: Image
  cover_image: Image
  images(size: Int, default: Boolean, page: Int): [Image]
}

type ArtworkContextSale {
  __id: ID!
  id: String!
  _id: String!
  cached: Int
  name: String
  href: String
  description: String
  sale_type: String
  is_auction: Boolean
  is_auction_promo: Boolean
  is_preview: Boolean
  is_open: Boolean
  is_live_open: Boolean
  is_closed: Boolean
  is_with_buyers_premium: Boolean
  auction_state: String
  status: String
  registration_ends_at(format: String): String
  start_at(format: String): String
  end_at(format: String): String
  live_start_at(format: String): String
  currency: String
  sale_artworks(page: Int = 1, size: Int = 25, all: Boolean = false): [SaleArtwork]
  artworks(page: Int = 1, size: Int = 25, all: Boolean = false, exclude: [String]): [Artwork]
  cover_image: Image
  sale_artwork(id: String!): SaleArtwork
  profile: Profile
  bid_increments: [BidIncrement]
  buyers_premium: [BuyersPremium]
}

type ArtworkLayer {
  __id: ID!
  id: String!
  type: String
  name: String
  href: String
  description: String
  artworks(size: Int): [Artwork]
}

type ArtworkMeta {
  title: String
  description(limit: Int = 155): String
  image: String
}

type ArtworksAggregationResults {
  slice: ArtworkAggregation
  counts: [AggregationCount]
}

type ArtworkSearchEntity implements Node {
  __id: ID!
  id: String!
  _id: String!
  cached: Int
  to_s: String
  href: String
  title: String
  category: String
  medium: String
  date: String
  image_rights: String
  website: String
  collecting_institution: String
  partner(shallow: Boolean): Partner
  embed(width: Int = 853, height: Int = 450, autoplay: Boolean = false): String
  can_share_image: Boolean
  is_embeddable_video: Boolean
  is_shareable: Boolean
  is_hangable: Boolean
  is_inquireable: Boolean
  is_contactable: Boolean
  is_in_auction: Boolean
  is_in_show: Boolean
  is_for_sale: Boolean
  is_biddable: Boolean
  is_unique: Boolean
  is_sold: Boolean
  is_ecommerce: Boolean
  is_acquireable: Boolean
  is_buy_nowable: Boolean
  is_comparable_with_auction_results: Boolean
  is_downloadable: Boolean
  is_price_hidden: Boolean
  availability: String
  sale_message: String
  artist(shallow: Boolean): Artist
  contact_label: String
  cultural_maker: String
  artists(shallow: Boolean): [Artist]
  dimensions: dimensions
  image: Image
  images(size: Int): [Image]
  context: ArtworkContext
  highlights: [Highlighted]
  articles(size: Int): [Article]
  shows(size: Int, active: Boolean, at_a_fair: Boolean, sort: PartnerShowSorts): [PartnerShow]
  show(size: Int, active: Boolean, at_a_fair: Boolean, sort: PartnerShowSorts): PartnerShow
  sale_artwork: SaleArtwork
  sale: Sale
  fair: Fair
  edition_of: String
  edition_sets: [EditionSet]
  description(format: Format): String
  exhibition_history(format: Format): String
  provenance(format: Format): String
  signature(format: Format): String
  additional_information(format: Format): String
  literature(format: Format): String
  publisher(format: Format): String
  manufacturer(format: Format): String
  series(format: Format): String
  meta: ArtworkMeta
  layer(id: String): ArtworkLayer
  layers: [ArtworkLayer]
}

enum ArtworkSorts {
  title_asc
  title_desc
  created_at_asc
  created_at_desc
  deleted_at_asc
  deleted_at_desc
  iconicity_desc
  merchandisability_desc
  published_at_asc
  published_at_desc
  partner_updated_at_desc
  availability_desc
}

type Author {
  __id: ID!
  id: String!
  name: String
  profile_handle: String
  href: String
}

type Bidder {
  __id: ID!
  id: String!
  created_at(format: String): String
  pin: String
  sale: Sale
  qualified_for_bidding: Boolean
}

type BidderPosition {
  __id: ID!
  id: String!
  created_at(format: String): String
  updated_at(format: String): String
  processed_at(format: String): String
  is_active: Boolean
  is_retracted: Boolean
  is_with_bid_max: Boolean
  is_winning: Boolean
  max_bid: BidderPositionMaxBid
  suggested_next_bid: BidderPositionSuggestedNextBid
  sale_artwork: SaleArtwork
  highest_bid: HighestBid
  display_max_bid_amount_dollars: String
  display_suggested_next_bid_dollars: String
  max_bid_amount_cents: Int
  suggested_next_bid_cents: Int
}

type BidderPositionMaxBid {
  cents: Int
  display: String
  amount(symbol: String, thousand: String = ",", decimal: String = ".", format: String = "%s%v", precision: Int = 0): String
}

type BidderPositionSuggestedNextBid {
  cents: Int
  display: String
  amount(symbol: String, thousand: String = ",", decimal: String = ".", format: String = "%s%v", precision: Int = 0): String
}

type BidderStatus {
  is_highest_bidder: Boolean
  active_bid: BidderPosition
  most_recent_bid: BidderPosition
}

type BidIncrement {
  from: Int
  to: Int
  amount: Int
}

type BuyersPremium {
  amount(symbol: String, thousand: String = ",", decimal: String = ".", format: String = "%s%v", precision: Int = 0): String
  cents: Int
  percent: Float
}

enum CategoryType {
  GALLERY
  INSTITUTION
}

type coordinates {
  lat: Float
  lng: Float
}

type CroppedImageUrl {
  width: Int
  height: Int
  url: String
}

type DaySchedule {
  start_time: Int
  end_time: Int
  day_of_week: String
}

type DeepZoom {
  Image: DeepZoomImage
}

type DeepZoomImage {
  xmlns: String
  Url: String
  Format: String
  TileSize: Int
  Overlap: Int
  Size: DeepZoomImageSize
}

type DeepZoomImageSize {
  Width: Int
  Height: Int
}

type dimensions {
  in: String
  cm: String
}

type EditionSet {
  __id: ID!
  id: String!
  dimensions: dimensions
  edition_of: String
  is_acquireable: Boolean
  is_sold: Boolean
  is_for_sale: Boolean
  price: String
}

enum EventStatus {
  current
  running
  closed
  upcoming
}

type Fair {
  __id: ID!
  id: String!
  _id: String!
  cached: Int
  banner_size: String
  profile: Profile
  has_full_feature: Boolean
  href: String
  image: Image
  location: Location
  start_at(format: String): String
  end_at(format: String): String
  name: String
  tagline: String
  published: Boolean
  is_published: Boolean
  organizer: organizer
}

enum FairSorts {
  CREATED_AT_ASC
  CREATED_AT_DESC
  START_AT_ASC
  START_AT_DESC
  NAME_ASC
  NAME_DESC
}

type FeaturedLinkItem {
  id: String
  title: String
  initials(length: Int = 3): String
  subtitle: String
  href: String
  image: Image
}

type FilterArtworks {
  hits: [Artwork]
  total: Int
  followed_artists_total: Int
  merchandisable_artists: [Artist]
  aggregations: [ArtworksAggregationResults]
}

type FilterPartners {
  hits: [Partner]
  total: Int
  aggregations: [PartnersAggregationResults]
}

type FollowArtistCounts {
  artists: Int
}

type FollowArtists {
  artists: [Artist]
  counts: FollowArtistCounts
}

enum Format {
  HTML
  PLAIN
  markdown
}

scalar FormattedNumber

type Gene {
  __id: ID!
  id: String!
  _id: String!
  cached: Int
  href: String
  name: String
  image: Image
  artists: [Artist]
  trending_artists(sample: Int): [Artist]
}

type GeneItem {
  __id: ID!
  id: String!
  _id: String!
  cached: Int
  href: String
  name: String
  image: Image
  artists: [Artist]
  trending_artists(sample: Int): [Artist]
}

type HighestBid {
  __id: ID!
  id: String!
  created_at(format: String): String
  number: Int
  is_cancelled: Boolean
  amount(symbol: String, thousand: String = ",", decimal: String = ".", format: String = "%s%v", precision: Int = 0): String
  cents: Int
  display: String
  amount_cents: Int
  display_amount_dollars: String
}

union Highlighted = HighlightedShow | HighlightedArticle

type HighlightedArticle implements Node {
  __id: ID!
  id: String!
  cached: Int
  title: String
  published_at(format: String): String
  updated_at(format: String): String
  thumbnail_title: String
  thumbnail_teaser: String
  author: Author
  thumbnail_image: Image
  slug: String
  href: String
}

type HighlightedShow implements Node {
  __id: ID!
  id: String!
  _id: String!
  cached: Int
  href: String
  kind: String
  name: String
  description: String
  type: String
  displayable: Boolean
  is_active: Boolean
  is_displayable: Boolean
  is_fair_booth: Boolean
  press_release(format: Format): String
  start_at(format: String): String
  end_at(format: String): String
  exhibition_period: String
  artists: [Artist]
  partner: Partner
  fair: Fair
  location: Location
  status: String
  status_update(max_days: Int): String
  events: [PartnerShowEventType]
  counts: PartnerShowCounts
  artworks(size: Int = 25, published: Boolean = true, page: Int = 1, all: Boolean, exclude: [String]): [Artwork]
  meta_image: Image
  cover_image: Image
  images(size: Int, default: Boolean, page: Int): [Image]
}

type HomePage {
  artwork_module(key: String, id: String): HomePageArtworkModule
  artwork_modules(max_rails: Int = 8): [HomePageArtworkModule]
  artist_module(key: String): HomePageArtistModule
  artist_modules: [HomePageArtistModule]
}

type HomePageArtistModule implements Node {
  __id: ID!
  key: String
  results: [Artist]
}

type HomePageArtworkModule implements Node {
  __id: ID!
  key: String
  display: String
  is_displayable: Boolean
  params: HomePageModulesParams
  context: HomePageModuleContext
  title: String
  results: [Artwork]
}

type HomePageModule implements Node {
  __id: ID!
  key: String
  display: String
  is_displayable: Boolean
  params: HomePageModulesParams
  context: HomePageModuleContext
  title: String
  results: [Artwork]
}

union HomePageModuleContext = HomePageModuleContextFair | HomePageModuleContextSale | HomePageModuleContextGene | HomePageModuleContextTrending | HomePageModuleContextFollowArtists | HomePageModuleContextRelatedArtist

type HomePageModuleContextFair {
  __id: ID!
  id: String!
  _id: String!
  cached: Int
  banner_size: String
  profile: Profile
  has_full_feature: Boolean
  href: String
  image: Image
  location: Location
  start_at(format: String): String
  end_at(format: String): String
  name: String
  tagline: String
  published: Boolean
  is_published: Boolean
  organizer: organizer
}

type HomePageModuleContextFollowArtists {
  artists: [Artist]
  counts: FollowArtistCounts
}

type HomePageModuleContextGene {
  __id: ID!
  id: String!
  _id: String!
  cached: Int
  href: String
  name: String
  image: Image
  artists: [Artist]
  trending_artists(sample: Int): [Artist]
}

type HomePageModuleContextRelatedArtist {
  artist: Artist
  based_on: Artist
}

type HomePageModuleContextSale {
  __id: ID!
  id: String!
  _id: String!
  cached: Int
  name: String
  href: String
  description: String
  sale_type: String
  is_auction: Boolean
  is_auction_promo: Boolean
  is_preview: Boolean
  is_open: Boolean
  is_live_open: Boolean
  is_closed: Boolean
  is_with_buyers_premium: Boolean
  auction_state: String
  status: String
  registration_ends_at(format: String): String
  start_at(format: String): String
  end_at(format: String): String
  live_start_at(format: String): String
  currency: String
  sale_artworks(page: Int = 1, size: Int = 25, all: Boolean = false): [SaleArtwork]
  artworks(page: Int = 1, size: Int = 25, all: Boolean = false, exclude: [String]): [Artwork]
  cover_image: Image
  sale_artwork(id: String!): SaleArtwork
  profile: Profile
  bid_increments: [BidIncrement]
  buyers_premium: [BuyersPremium]
}

type HomePageModuleContextTrending {
  artists: [Artist]
}

type HomePageModulesParams {
  gene_id: String
  medium: String
  price_range: String
  id: ID
}

type Image {
  id: String
  href: String
  title: String
  width: Int
  height: Int
  orientation: String
  aspect_ratio: Float
  versions: [String]
  caption: String
  is_default: Boolean
  position: Int
  url(version: [String]): String
  cropped(width: Int!, height: Int!, version: [String]): CroppedImageUrl
  resized(width: Int, height: Int, version: [String]): ResizedImageUrl
  deep_zoom: DeepZoom
  is_zoomable: Boolean
  placeholder: String
}

union Item = ArtistItem | FeaturedLinkItem | GeneItem

type Location {
  __id: ID!
  id: String!
  cached: Int
  city: String
  country: String
  coordinates: coordinates
  display: String
  address: String
  address_2: String
  postal_code: String
  state: String
  phone: String
  day_schedules: [DaySchedule]
}

type Me {
  __id: ID!
  id: String!
  type: String
  created_at(format: String): String
  email: String
  name: String
  paddle_number: String
  bidders(sale_id: String): [Bidder]
  bidder_status(sale_id: String!, artwork_id: String!): BidderStatus
  bidder_positions(current: Boolean, artwork_id: String, sale_id: String): [BidderPosition]
  sale_registrations(size: Int, is_auction: Boolean = true, published: Boolean = true, live: Boolean = true, sort: SaleSorts): [SaleRegistration]
  follow_artists(size: Int, page: Int): FollowArtists
}

input Near {
  lat: Float!
  lng: Float!
  max_distance: Float
}

interface Node {
  __id: ID!
}

type OrderedSet {
  __id: ID!
  id: String!
  cached: Int
  key: String
  name: String
  description: String
  item_type: String
  items: [Item]
}

type organizer {
  profile_id: ID
}

type Partner implements Node {
  __id: ID!
  id: String!
  _id: String!
  cached: Int
  name: String
  collecting_institution: String
  is_default_profile_public: Boolean
  type: String
  href: String
  is_linkable: Boolean
  is_pre_qualify: Boolean
  is_limited_fair_partner: Boolean
  initials(length: Int = 3): String
  default_profile_id: String
  profile: Profile
  shows(size: Int, sort: PartnerShowSorts, status: EventStatus, fair_id: String, near: Near, displayable: Boolean = true, featured: Boolean, at_a_fair: Boolean): [PartnerShow]
  artworks(size: Int, sort: ArtworkSorts, exclude: [String]): [Artwork]
  locations(size: Int = 25): [Location]
  contact_message: String
  counts: PartnerCounts
}

type PartnerArtist {
  __id: ID!
  id: String!
  counts: PartnerArtistCounts
  is_display_on_partner_profile: Boolean
  is_represented_by: Boolean
  sortable_id: String
  is_use_default_biography: Boolean
  biography: String
  partner: Partner
  artist: Artist
}

type PartnerArtistCounts {
  artworks(format: String, label: String): FormattedNumber
  for_sale_artworks(format: String, label: String): FormattedNumber
}

type PartnerCategory {
  __id: ID!
  id: String!
  cached: Int
  name: String
  category_type: CategoryType
  partners(size: Int, page: Int, near: String, eligible_for_primary_bucket: Boolean, eligible_for_secondary_bucket: Boolean, eligible_for_listing: Boolean, eligible_for_carousel: Boolean, has_full_profile: Boolean, default_profile_public: Boolean, sort: PartnersSortType, partner_categories: [String], type: [PartnerClassification], term: String): [Partner]
}

enum PartnerClassification {
  AUCTION
  DEMO
  GALLERY
  PRIVATE_COLLECTOR
  PRIVATE_DEALER
  INSTITUTION
  INSTITUTIONAL_SELLER
  BRAND
}

type PartnerCounts {
  artworks(format: String, label: String): FormattedNumber
  artists(format: String, label: String): FormattedNumber
  partner_artists(format: String, label: String): FormattedNumber
  eligible_artworks(format: String, label: String): FormattedNumber
  published_for_sale_artworks(format: String, label: String): FormattedNumber
  published_not_for_sale_artworks(format: String, label: String): FormattedNumber
  shows(format: String, label: String): FormattedNumber
  displayable_shows(format: String, label: String): FormattedNumber
  current_displayable_shows(format: String, label: String): FormattedNumber
  artist_documents(format: String, label: String): FormattedNumber
  partner_show_documents(format: String, label: String): FormattedNumber
}

enum PartnersAggregation {
  LOCATION
  CATEGORY
  TOTAL
}

type PartnersAggregationResults {
  slice: PartnersAggregation
  counts: [AggregationCount]
}

type PartnerShow implements Node {
  __id: ID!
  id: String!
  _id: String!
  cached: Int
  href: String
  kind: String
  name: String
  description: String
  type: String
  displayable: Boolean
  is_active: Boolean
  is_displayable: Boolean
  is_fair_booth: Boolean
  press_release(format: Format): String
  start_at(format: String): String
  end_at(format: String): String
  exhibition_period: String
  artists: [Artist]
  partner: Partner
  fair: Fair
  location: Location
  status: String
  status_update(max_days: Int): String
  events: [PartnerShowEventType]
  counts: PartnerShowCounts
  artworks(size: Int = 25, published: Boolean = true, page: Int = 1, all: Boolean, exclude: [String]): [Artwork]
  meta_image: Image
  cover_image: Image
  images(size: Int, default: Boolean, page: Int): [Image]
}

type PartnerShowCounts {
  artworks(artist_id: String): Int
}

type PartnerShowEventType {
  title: String
  description: String
  event_type: String
  start_at(format: String): String
  end_at(format: String): String
}

type PartnerShowSearchEntity implements Node {
  __id: ID!
  id: String!
  _id: String!
  cached: Int
  href: String
  kind: String
  name: String
  description: String
  type: String
  displayable: Boolean
  is_active: Boolean
  is_displayable: Boolean
  is_fair_booth: Boolean
  press_release(format: Format): String
  start_at(format: String): String
  end_at(format: String): String
  exhibition_period: String
  artists: [Artist]
  partner: Partner
  fair: Fair
  location: Location
  status: String
  status_update(max_days: Int): String
  events: [PartnerShowEventType]
  counts: PartnerShowCounts
  artworks(size: Int = 25, published: Boolean = true, page: Int = 1, all: Boolean, exclude: [String]): [Artwork]
  meta_image: Image
  cover_image: Image
  images(size: Int, default: Boolean, page: Int): [Image]
}

enum PartnerShowSorts {
  created_at_asc
  created_at_desc
  end_at_asc
  end_at_desc
  start_at_asc
  start_at_desc
  name_asc
  name_desc
  publish_at_asc
  publish_at_desc
}

enum PartnersSortType {
  CREATED_AT_ASC
  CREATED_AT_DESC
  SORTABLE_ID_ASC
  SORTABLE_ID_DESC
  RELATIVE_SIZE_ASC
  RELATIVE_SIZE_DESC
  PUBLISHED_AT_DESC
  RANDOM_SCORE_DESC
}

type Profile {
  __id: ID!
  id: String!
  _id: String!
  cached: Int
  name: String
  image: Image
  initials(length: Int = 3): String
  icon: Image
  href: String
  is_published: Boolean
  bio: String
  counts: ProfileCounts
}

type ProfileCounts {
  follows(format: String, label: String): FormattedNumber
}

type ProfileSearchEntity {
  __id: ID!
  id: String!
  _id: String!
  cached: Int
  name: String
  image: Image
  initials(length: Int = 3): String
  icon: Image
  href: String
  is_published: Boolean
  bio: String
  counts: ProfileCounts
}

type ResizedImageUrl {
  factor: Float
  width: Int
  height: Int
  url: String
}

enum Role {
  PARTICIPANT
  OPERATOR
}

type RootQueryType {
  node(__id: ID!): Node
  status: Status
  article(id: String!): Article
  articles(show_id: String, sort: ArticleSorts, published: Boolean = true): [Article]
  artwork(id: String!): Artwork
  artworks(ids: [String]): [Artwork]
  artist(id: String!): Artist
  artists(size: Int, sort: ArtistSorts): [Artist]
  fair(id: String!): Fair
  fairs(size: Int, page: Int, sort: FairSorts, status: EventStatus, fair_organizer_id: String, near: Near, has_full_feature: Boolean): [Fair]
  gene(id: String!): Gene
  home_page: HomePage
  home_page_modules(max_rails: Int = 8): [HomePageModule]
  home_page_module(key: String, id: String): HomePageModule
  profile(id: String!): Profile
  ordered_sets(key: String!, public: Boolean = true): [OrderedSet]
  partner(id: String!): Partner
  partners(size: Int, page: Int, near: String, eligible_for_primary_bucket: Boolean, eligible_for_secondary_bucket: Boolean, eligible_for_listing: Boolean, eligible_for_carousel: Boolean, has_full_profile: Boolean, default_profile_public: Boolean, sort: PartnersSortType, partner_categories: [String], type: [PartnerClassification], term: String): [Partner]
  filter_partners(size: Int, page: Int, near: String, eligible_for_primary_bucket: Boolean, eligible_for_secondary_bucket: Boolean, eligible_for_listing: Boolean, eligible_for_carousel: Boolean, has_full_profile: Boolean, default_profile_public: Boolean, sort: PartnersSortType, partner_categories: [String], type: [PartnerClassification], term: String, aggregations: [PartnersAggregation]!): FilterPartners
  filter_artworks(aggregation_partner_cities: [String], aggregations: [ArtworkAggregation], artist_id: Int, color: String, dimension_range: String, extra_aggregation_gene_ids: [String], include_artworks_by_followed_artists: Boolean, for_sale: Boolean, gene_id: String, gene_ids: [String], height: String, width: String, medium: String, period: String, periods: [String], major_periods: [String], partner_id: ID, partner_cities: [String], price_range: String, page: Int, size: Int, sort: String): FilterArtworks
  partner_category(id: String!): PartnerCategory
  partner_categories(size: Int, category_type: CategoryType, internal: Boolean = false): [PartnerCategory]
  partner_show(id: String!): PartnerShow
  partner_shows(size: Int, sort: PartnerShowSorts, status: EventStatus, fair_id: String, partner_id: String, near: Near, displayable: Boolean = true, featured: Boolean, at_a_fair: Boolean): [PartnerShow]
  sale(id: String!): Sale
  sales(size: Int, is_auction: Boolean = true, published: Boolean = true, live: Boolean = true, sort: SaleSorts): [Sale]
  sale_artwork(id: String!): SaleArtwork
  search(term: String!): Search
  trending_artists(method: String = "fetch", name: TrendingMetrics!, size: Int = 40, double_time_period: Boolean = false): TrendingArtists
  me: Me
  causality_jwt(sale_id: String!, role: Role): String
}

type Sale {
  __id: ID!
  id: String!
  _id: String!
  cached: Int
  name: String
  href: String
  description: String
  sale_type: String
  is_auction: Boolean
  is_auction_promo: Boolean
  is_preview: Boolean
  is_open: Boolean
  is_live_open: Boolean
  is_closed: Boolean
  is_with_buyers_premium: Boolean
  auction_state: String
  status: String
  registration_ends_at(format: String): String
  start_at(format: String): String
  end_at(format: String): String
  live_start_at(format: String): String
  currency: String
  sale_artworks(page: Int = 1, size: Int = 25, all: Boolean = false): [SaleArtwork]
  artworks(page: Int = 1, size: Int = 25, all: Boolean = false, exclude: [String]): [Artwork]
  cover_image: Image
  sale_artwork(id: String!): SaleArtwork
  profile: Profile
  bid_increments: [BidIncrement]
  buyers_premium: [BuyersPremium]
}

type SaleArtwork {
  __id: ID!
  id: String!
  _id: String!
  cached: Int
  sale_id: String
  sale: Sale
  position: Int
  lot_number: String
  currency: String
  symbol: String
  reserve_status: String
  is_with_reserve: Boolean
  is_bid_on: Boolean
  is_biddable: Boolean
  reserve_message: String
  reserve: SaleArtworkReserve
  low_estimate: SaleArtworkLowEstimate
  high_estimate: SaleArtworkHighEstimate
  opening_bid: SaleArtworkOpeningBid
  minimum_next_bid: SaleArtworkMinimumNextBid
  current_bid: SaleArtworkCurrentBid
  highest_bid: SaleArtworkHighestBid
  artwork: Artwork
  estimate: String
  counts: SaleArtworkCounts
  low_estimate_cents: Int
  high_estimate_cents: Int
  opening_bid_cents: Int
  minimum_next_bid_cents: Int
  bidder_positions_count: Int
  bid_increments: [Int]
}

type SaleArtworkCounts {
  bidder_positions(format: String, label: String): FormattedNumber
}

type SaleArtworkCurrentBid {
  cents: Int
  display: String
  amount(symbol: String, thousand: String = ",", decimal: String = ".", format: String = "%s%v", precision: Int = 0): String
}

type SaleArtworkHighestBid {
  id: ID
  created_at(format: String): String
  is_cancelled: Boolean
  amount(symbol: String, thousand: String = ",", decimal: String = ".", format: String = "%s%v", precision: Int = 0): String
  cents: Int
  display: String
  amount_cents: Int
}

type SaleArtworkHighEstimate {
  cents: Int
  display: String
  amount(symbol: String, thousand: String = ",", decimal: String = ".", format: String = "%s%v", precision: Int = 0): String
}

type SaleArtworkLowEstimate {
  cents: Int
  display: String
  amount(symbol: String, thousand: String = ",", decimal: String = ".", format: String = "%s%v", precision: Int = 0): String
}

type SaleArtworkMinimumNextBid {
  cents: Int
  display: String
  amount(symbol: String, thousand: String = ",", decimal: String = ".", format: String = "%s%v", precision: Int = 0): String
}

type SaleArtworkOpeningBid {
  cents: Int
  display: String
  amount(symbol: String, thousand: String = ",", decimal: String = ".", format: String = "%s%v", precision: Int = 0): String
}

type SaleArtworkReserve {
  cents: Int
  display: String
  amount(symbol: String, thousand: String = ",", decimal: String = ".", format: String = "%s%v", precision: Int = 0): String
}

type SaleRegistration {
  is_registered: Boolean
  bidder: Bidder
  sale: Sale
}

enum SaleSorts {
  _ID_ASC
  _ID_DESC
  NAME_ASC
  NAME_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  END_AT_ASC
  END_AT_DESC
  START_AT_ASC
  START_AT_DESC
  ELIGIBLE_SALE_ARTWORKS_COUNT_ASC
  ELIGIBLE_SALE_ARTWORKS_COUNT_DESC
}

type Search {
  cached: Int
  total: Int
  results: [SearchResult]
}

union SearchEntity = ArtistSearchEntity | ArtworkSearchEntity | ProfileSearchEntity | PartnerShowSearchEntity

type SearchResult {
  id: ID
  title: String
  href: String
  snippet: String
  image: Image
  type: String
  entity: SearchEntity
}

type Status {
  gravity: StatusGravity
  ping: Boolean
}

type StatusGravity {
  ping: Boolean
}

type TrendingArtists {
  artists: [Artist]
}

enum TrendingMetrics {
  ARTIST_FOLLOW
  ARTIST_INQUIRY
  ARTIST_SEARCH
  ARTIST_SAVE
  ARTIST_FAIR
  ARTIST_AUCTION_LOT
}
