# source: https://metaphysics-staging.artsy.net/
# timestamp: Tue Jun 26 2018 15:21:08 GMT-0400 (EDT)

input AddAssetToConsignmentSubmissionInput {
  """The type of the asset"""
  asset_type: String!

  """The token provided by Gemini for your asset"""
  gemini_token: String!

  """The id of the submission you want to attach an asset to"""
  submission_id: String!
  clientMutationId: String
}

type AddAssetToConsignmentSubmissionPayload {
  asset: Asset
  clientMutationId: String
}

"""One item in an aggregation"""
type AggregationCount {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!
  count: Int
  name: String
  sortable_id: String
}

type Article implements Node {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!
  cached: Int
  author: Author
  channel_id: String
  contributing_authors: [Author]
  href: String
  published_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  slug: String
  thumbnail_title: String
  thumbnail_teaser: String
  thumbnail_image: Image
  tier: Int
  title: String
  updated_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
}

"""A connection to a list of items."""
type ArticleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ArticleEdge]
  pageCursors: PageCursors
  totalCount: Int
}

"""An edge in a connection."""
type ArticleEdge {
  """The item at the end of the edge"""
  node: Article

  """A cursor for use in pagination"""
  cursor: String!
}

enum ArticleSorts {
  PUBLISHED_AT_ASC
  PUBLISHED_AT_DESC
}

type Artist implements Node {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!

  """A type-specific Gravity Mongo Document ID."""
  _id: String!
  cached: Int
  alternate_names: [String]
  articlesConnection(sort: ArticleSorts, limit: Int, in_editorial_feed: Boolean, after: String, first: Int, before: String, last: Int): ArticleConnection
  articles(sort: ArticleSorts, limit: Int, in_editorial_feed: Boolean): [Article]
  artists(
    """The number of Artists to return"""
    size: Int
    exclude_artists_without_artworks: Boolean = true
  ): [Artist]
  artworks(
    """The number of Artworks to return"""
    size: Int
    page: Int
    sort: ArtworkSorts
    published: Boolean = true
    filter: [ArtistArtworksFilters]
    exclude: [String]
  ): [Artwork]
  artworks_connection(sort: ArtworkSorts, filter: [ArtistArtworksFilters], published: Boolean = true, after: String, first: Int, before: String, last: Int): ArtworkConnection
  auctionResults(
    sort: AuctionResultSorts

    """When true, will only return records for whitelisted artists."""
    recordsTrusted: Boolean = false
    after: String
    first: Int
    before: String
    last: Int
  ): AuctionResultConnection
  bio: String

  """The Artist biography article written by Artsy"""
  biography: Article
  biography_blurb(
    """If true, will return featured bio over Artsy one."""
    partner_bio: Boolean = false
    format: Format
  ): ArtistBlurb
  birthday: String
  blurb(format: Format): String
  carousel: ArtistCarousel
  collections: [String]
  contemporary(
    """The number of Artists to return"""
    size: Int
    exclude_artists_without_artworks: Boolean = true
  ): [Artist]
  consignable: Boolean @deprecated(reason: "Favor `is_`-prefixed boolean attributes")
  counts: ArtistCounts
  deathday: String
  display_auction_link: Boolean @deprecated(reason: "Favor `is_`-prefixed boolean attributes")

  """Custom-sorted list of shows for an artist, in order of significance."""
  exhibition_highlights(
    """The number of Shows to return"""
    size: Int = 5
  ): [Show]

  """Artworks Elastic Search results"""
  filtered_artworks(
    aggregation_partner_cities: [String]
    aggregations: [ArtworkAggregation]
    artist_id: String
    artist_ids: [String]
    color: String
    dimension_range: String
    extra_aggregation_gene_ids: [String]
    include_artworks_by_followed_artists: Boolean
    include_medium_filter_in_aggregation: Boolean
    for_sale: Boolean
    gene_id: String
    gene_ids: [String]
    height: String
    width: String

    """A string from the list of allocations, or * to denote all mediums"""
    medium: String
    period: String
    periods: [String]
    major_periods: [String]
    partner_id: ID
    partner_cities: [String]
    price_range: String
    page: Int
    sale_id: ID
    size: Int
    sort: String
    tag_id: String
    keyword: String
  ): FilterArtworks

  """A string showing the total number of works and those for sale"""
  formatted_artworks_count: String

  """A string of the form "Nationality, Birthday (or Birthday-Deathday)""""
  formatted_nationality_and_birthday: String

  """A list of genes associated with an artist"""
  genes: [Gene]
  gender: String
  href: String
  has_metadata: Boolean
  hometown: String
  image: Image
  initials(length: Int = 3): String
  is_consignable: Boolean

  """Only specific Artists should show a link to auction results."""
  is_display_auction_link: Boolean
  is_followed: Boolean
  is_public: Boolean
  is_shareable: Boolean
  location: String
  meta: ArtistMeta
  nationality: String
  name: String
  partners(represented_by: Boolean, partner_category: [String], after: String, first: Int, before: String, last: Int): PartnerArtistConnection
  partner_artists(
    """The number of PartnerArtists to return"""
    size: Int
  ): [PartnerArtist]
  partner_shows(
    active: Boolean
    at_a_fair: Boolean
    is_reference: Boolean

    """The number of PartnerShows to return"""
    size: Int
    solo_show: Boolean
    status: String
    top_tier: Boolean
    visible_to_public: Boolean
    sort: PartnerShowSorts
  ): [PartnerShow] @deprecated(reason: "Prefer to use shows attribute")
  public: Boolean @deprecated(reason: "Favor `is_`-prefixed boolean attributes")
  related: ArtistRelatedData
  sales(
    live: Boolean
    is_auction: Boolean

    """The number of Sales to return"""
    size: Int
    sort: SaleSorts
  ): [Sale]
  shows(
    active: Boolean
    at_a_fair: Boolean
    is_reference: Boolean

    """The number of PartnerShows to return"""
    size: Int
    solo_show: Boolean
    status: String
    top_tier: Boolean
    visible_to_public: Boolean
    sort: PartnerShowSorts
  ): [Show]
  showsConnection(
    active: Boolean
    at_a_fair: Boolean
    is_reference: Boolean

    """The number of PartnerShows to return"""
    size: Int
    solo_show: Boolean
    status: String
    top_tier: Boolean
    visible_to_public: Boolean
    sort: PartnerShowSorts
    after: String
    first: Int
    before: String
    last: Int
  ): ShowConnection

  """Use this attribute to sort by when sorting a collection of Artists"""
  sortable_id: String
  statuses: ArtistStatuses
  highlights: ArtistHighlights
  years: String
}

enum ArtistArtworksFilters {
  IS_FOR_SALE
  IS_NOT_FOR_SALE
}

type ArtistBlurb {
  credit: String
  text: String

  """The partner id of the partner who submitted the featured bio."""
  partner_id: String
}

type ArtistCarousel {
  images: [Image]
}

"""A connection to a list of items."""
type ArtistConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ArtistEdge]
  pageCursors: PageCursors
  totalCount: Int
}

type ArtistCounts {
  artworks(
    """Returns a `String` when format is specified. e.g.`'0,0.0000''`"""
    format: String
    label: String
  ): FormattedNumber
  follows(
    """Returns a `String` when format is specified. e.g.`'0,0.0000''`"""
    format: String
    label: String
  ): FormattedNumber
  for_sale_artworks(
    """Returns a `String` when format is specified. e.g.`'0,0.0000''`"""
    format: String
    label: String
  ): FormattedNumber
  partner_shows(
    """Returns a `String` when format is specified. e.g.`'0,0.0000''`"""
    format: String
    label: String
  ): FormattedNumber
  related_artists: Int
  articles: Int
}

"""An edge in a connection."""
type ArtistEdge {
  """The item at the end of the edge"""
  node: Artist

  """A cursor for use in pagination"""
  cursor: String!
}

type ArtistHighlights {
  partners(represented_by: Boolean, partner_category: [String], display_on_partner_profile: Boolean, after: String, first: Int, before: String, last: Int): PartnerArtistConnection
}

type ArtistItem implements Node {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!

  """A type-specific Gravity Mongo Document ID."""
  _id: String!
  cached: Int
  alternate_names: [String]
  articlesConnection(sort: ArticleSorts, limit: Int, in_editorial_feed: Boolean, after: String, first: Int, before: String, last: Int): ArticleConnection
  articles(sort: ArticleSorts, limit: Int, in_editorial_feed: Boolean): [Article]
  artists(
    """The number of Artists to return"""
    size: Int
    exclude_artists_without_artworks: Boolean = true
  ): [Artist]
  artworks(
    """The number of Artworks to return"""
    size: Int
    page: Int
    sort: ArtworkSorts
    published: Boolean = true
    filter: [ArtistArtworksFilters]
    exclude: [String]
  ): [Artwork]
  artworks_connection(sort: ArtworkSorts, filter: [ArtistArtworksFilters], published: Boolean = true, after: String, first: Int, before: String, last: Int): ArtworkConnection
  auctionResults(
    sort: AuctionResultSorts

    """When true, will only return records for whitelisted artists."""
    recordsTrusted: Boolean = false
    after: String
    first: Int
    before: String
    last: Int
  ): AuctionResultConnection
  bio: String

  """The Artist biography article written by Artsy"""
  biography: Article
  biography_blurb(
    """If true, will return featured bio over Artsy one."""
    partner_bio: Boolean = false
    format: Format
  ): ArtistBlurb
  birthday: String
  blurb(format: Format): String
  carousel: ArtistCarousel
  collections: [String]
  contemporary(
    """The number of Artists to return"""
    size: Int
    exclude_artists_without_artworks: Boolean = true
  ): [Artist]
  consignable: Boolean @deprecated(reason: "Favor `is_`-prefixed boolean attributes")
  counts: ArtistCounts
  deathday: String
  display_auction_link: Boolean @deprecated(reason: "Favor `is_`-prefixed boolean attributes")

  """Custom-sorted list of shows for an artist, in order of significance."""
  exhibition_highlights(
    """The number of Shows to return"""
    size: Int = 5
  ): [Show]

  """Artworks Elastic Search results"""
  filtered_artworks(
    aggregation_partner_cities: [String]
    aggregations: [ArtworkAggregation]
    artist_id: String
    artist_ids: [String]
    color: String
    dimension_range: String
    extra_aggregation_gene_ids: [String]
    include_artworks_by_followed_artists: Boolean
    include_medium_filter_in_aggregation: Boolean
    for_sale: Boolean
    gene_id: String
    gene_ids: [String]
    height: String
    width: String

    """A string from the list of allocations, or * to denote all mediums"""
    medium: String
    period: String
    periods: [String]
    major_periods: [String]
    partner_id: ID
    partner_cities: [String]
    price_range: String
    page: Int
    sale_id: ID
    size: Int
    sort: String
    tag_id: String
    keyword: String
  ): FilterArtworks

  """A string showing the total number of works and those for sale"""
  formatted_artworks_count: String

  """A string of the form "Nationality, Birthday (or Birthday-Deathday)""""
  formatted_nationality_and_birthday: String

  """A list of genes associated with an artist"""
  genes: [Gene]
  gender: String
  href: String
  has_metadata: Boolean
  hometown: String
  image: Image
  initials(length: Int = 3): String
  is_consignable: Boolean

  """Only specific Artists should show a link to auction results."""
  is_display_auction_link: Boolean
  is_followed: Boolean
  is_public: Boolean
  is_shareable: Boolean
  location: String
  meta: ArtistMeta
  nationality: String
  name: String
  partners(represented_by: Boolean, partner_category: [String], after: String, first: Int, before: String, last: Int): PartnerArtistConnection
  partner_artists(
    """The number of PartnerArtists to return"""
    size: Int
  ): [PartnerArtist]
  partner_shows(
    active: Boolean
    at_a_fair: Boolean
    is_reference: Boolean

    """The number of PartnerShows to return"""
    size: Int
    solo_show: Boolean
    status: String
    top_tier: Boolean
    visible_to_public: Boolean
    sort: PartnerShowSorts
  ): [PartnerShow] @deprecated(reason: "Prefer to use shows attribute")
  public: Boolean @deprecated(reason: "Favor `is_`-prefixed boolean attributes")
  related: ArtistRelatedData
  sales(
    live: Boolean
    is_auction: Boolean

    """The number of Sales to return"""
    size: Int
    sort: SaleSorts
  ): [Sale]
  shows(
    active: Boolean
    at_a_fair: Boolean
    is_reference: Boolean

    """The number of PartnerShows to return"""
    size: Int
    solo_show: Boolean
    status: String
    top_tier: Boolean
    visible_to_public: Boolean
    sort: PartnerShowSorts
  ): [Show]
  showsConnection(
    active: Boolean
    at_a_fair: Boolean
    is_reference: Boolean

    """The number of PartnerShows to return"""
    size: Int
    solo_show: Boolean
    status: String
    top_tier: Boolean
    visible_to_public: Boolean
    sort: PartnerShowSorts
    after: String
    first: Int
    before: String
    last: Int
  ): ShowConnection

  """Use this attribute to sort by when sorting a collection of Artists"""
  sortable_id: String
  statuses: ArtistStatuses
  highlights: ArtistHighlights
  years: String
}

type ArtistMeta {
  description: String
  title: String
}

type ArtistRelatedData {
  genes(after: String, first: Int, before: String, last: Int): GeneConnection
  artists(exclude_artists_without_artworks: Boolean = true, kind: RelatedArtistsKind, after: String, first: Int, before: String, last: Int): ArtistConnection

  """
  A list of the current user’s suggested artists, based on a single artist
  """
  suggested(
    """The slug or ID of an artist"""
    artist_id: String

    """Exclude artists without for sale works"""
    exclude_artists_without_forsale_artworks: Boolean

    """Exclude artists without any artworks"""
    exclude_artists_without_artworks: Boolean

    """Exclude artists the user already follows"""
    exclude_followed_artists: Boolean

    """
    Exclude these ids from results, may result in all artists being excluded.
    """
    exclude_artist_ids: [String]

    """Pagination, need I say more?"""
    page: Int

    """Amount of artists to return"""
    size: Int
    after: String
    first: Int
    before: String
    last: Int
  ): ArtistConnection
}

enum ArtistSorts {
  sortable_id_asc @deprecated(reason: "use capital enums")
  sortable_id_desc @deprecated(reason: "use capital enums")
  trending_desc @deprecated(reason: "use capital enums")
  SORTABLE_ID_ASC
  SORTABLE_ID_DESC
  TRENDING_DESC
}

type ArtistStatuses {
  artists: Boolean
  articles: Boolean
  artworks: Boolean
  auction_lots: Boolean
  biography: Boolean
  contemporary: Boolean
  cv: Boolean
  shows: Boolean
}

type Artwork implements Node {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!

  """A type-specific Gravity Mongo Document ID."""
  _id: String!
  additional_information(format: Format): String
  artist(
    """Use whatever is in the original response instead of making a request"""
    shallow: Boolean
  ): Artist
  artists(
    """Use whatever is in the original response instead of making a request"""
    shallow: Boolean
  ): [Artist]
  artist_names: String
  articles(size: Int): [Article]
  availability: String
  can_share_image: Boolean @deprecated(reason: "Favor `is_`-prefixed boolean attributes")
  category: String

  """Attribution class object"""
  attribution_class: AttributionClass
  collecting_institution: String
  contact_label: String

  """Pre-filled inquiry text"""
  contact_message: String

  """Returns the associated Fair/Sale/PartnerShow"""
  context: ArtworkContext
  cultural_maker: String
  date: String
  description(format: Format): String
  dimensions: dimensions

  """Returns an HTML string representing the embedded content (video)"""
  embed(width: Int = 853, height: Int = 450, autoplay: Boolean = false): String
  edition_of: String
  edition_sets: [EditionSet]
  exhibition_history(format: Format): String
  fair: Fair

  """Returns the highlighted shows and articles"""
  highlights: [Highlighted]
  href: String
  image: Image
  image_rights: String
  image_title: String
  images(size: Int): [Image]

  """Whether work can be purchased through e-commerce"""
  is_acquireable: Boolean

  """Is this artwork part of an auction that is currently running?"""
  is_biddable: Boolean

  """When in an auction, can the work be bought immediately"""
  is_buy_nowable: Boolean
  is_comparable_with_auction_results: Boolean

  """Are we able to display a contact form on artwork pages?"""
  is_contactable: Boolean @deprecated(reason: "Prefer to use is_inquireable")
  is_downloadable: Boolean
  is_embeddable_video: Boolean
  is_ecommerce: Boolean @deprecated(reason: "Should not be used to determine anything UI-level")
  is_for_sale: Boolean
  is_hangable: Boolean

  """Do we want to encourage inquiries on this work?"""
  is_inquireable: Boolean

  """Is this artwork part of an auction?"""
  is_in_auction: Boolean

  """Is this artwork part of a current show"""
  is_in_show: Boolean
  is_not_for_sale: String
  is_on_hold: String
  is_price_hidden: Boolean
  is_price_range: Boolean

  """True for inquireable artworks that have an exact price."""
  is_purchasable: Boolean
  is_saved: Boolean
  is_shareable: Boolean
  is_sold: Boolean
  is_unique: Boolean
  layer(id: String): ArtworkLayer
  layers: [ArtworkLayer]
  literature(format: Format): String
  manufacturer(format: Format): String
  medium: String
  meta: ArtworkMeta
  partner(
    """Use whatever is in the original response instead of making a request"""
    shallow: Boolean
  ): Partner
  price: String
  provenance(format: Format): String
  publisher(format: Format): String
  related(size: Int): [Artwork]
  sale: Sale
  sale_artwork(sale_id: String = null): SaleArtwork
  sale_message: String
  series(format: Format): String
  show(size: Int, active: Boolean, at_a_fair: Boolean, sort: PartnerShowSorts): PartnerShow
  shows(size: Int, active: Boolean, at_a_fair: Boolean, sort: PartnerShowSorts): [PartnerShow]
  signature(format: Format): String
  title: String
  to_s: String
  website: String
  cached: Int
}

enum ArtworkAggregation {
  COLOR
  DIMENSION_RANGE
  FOLLOWED_ARTISTS
  MAJOR_PERIOD
  MEDIUM
  MERCHANDISABLE_ARTISTS
  GALLERY
  INSTITUTION
  PARTNER_CITY
  PERIOD
  PRICE_RANGE
  TOTAL
}

"""A connection to a list of items."""
type ArtworkConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ArtworkEdge]
  pageCursors: PageCursors
  totalCount: Int
}

union ArtworkContext = ArtworkContextAuction | ArtworkContextFair | ArtworkContextPartnerShow | ArtworkContextSale

type ArtworkContextAuction implements Node {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!

  """A type-specific Gravity Mongo Document ID."""
  _id: String!
  cached: Int
  artworks(
    page: Int = 1
    size: Int = 25
    all: Boolean = false

    """
    List of artwork IDs to exclude from the response (irrespective of size)
    """
    exclude: [String]
  ): [Artwork]
  associated_sale: Sale
  auction_state: String @deprecated(reason: "Favor `status` for consistency with other models")

  """A bid increment policy that explains minimum bids in ranges."""
  bid_increments: [BidIncrement]

  """Auction's buyer's premium policy."""
  buyers_premium: [BuyersPremium]
  cover_image: Image
  currency: String
  description: String
  display_timely_at: String
  eligible_sale_artworks_count: Int
  end_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  event_start_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  event_end_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  href: String
  name: String
  is_auction: Boolean
  is_auction_promo: Boolean
  is_closed: Boolean
  is_open: Boolean
  is_live_open: Boolean
  is_preview: Boolean
  is_registration_closed: Boolean
  is_with_buyers_premium: Boolean
  live_start_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String

  """
  Returns a live auctions url if the sale is open and start time is after now
  """
  live_url_if_open: String
  partner: Partner
  profile: Profile
  promoted_sale: Sale
  registration_ends_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  require_bidder_approval: Boolean
  sale_artworks(page: Int = 1, size: Int = 25, all: Boolean = false): [SaleArtwork]
  sale_artworks_connection(after: String, first: Int, before: String, last: Int): SaleArtworkConnection
  sale_type: String
  start_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  status: String
  sale_artwork(id: String!): SaleArtwork
  symbol: String
}

type ArtworkContextFair {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!

  """A type-specific Gravity Mongo Document ID."""
  _id: String!
  cached: Int
  banner_size: String
  has_full_feature: Boolean
  has_homepage_section: Boolean
  has_large_banner: Boolean
  has_listing: Boolean
  href: String
  image: Image

  """Are we currently in the fair's active period?"""
  is_active: Boolean
  mobile_image: Image
  is_published: Boolean
  location: Location
  name: String
  profile: Profile
  shows_connection(
    """Number of artworks to return"""
    section: String

    """Sorts for shows in a fair"""
    sort: ShowSort = FEATURED_DESC
    after: String
    first: Int
    before: String
    last: Int
  ): ShowConnection
  start_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  end_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  organizer: organizer
  published: Boolean @deprecated(reason: "Prefix Boolean returning fields with `is_`")
  tagline: String
}

type ArtworkContextPartnerShow implements Node {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!

  """A type-specific Gravity Mongo Document ID."""
  _id: String!
  cached: Int
  artists: [Artist]
  artworks(
    all: Boolean

    """
    List of artwork IDs to exclude from the response (irrespective of size)
    """
    exclude: [String]
    for_sale: Boolean
    published: Boolean = true
    page: Int = 1

    """Number of artworks to return"""
    size: Int = 25
  ): [Artwork]
  counts: PartnerShowCounts
  cover_image: Image
  created_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  description: String
  displayable: Boolean @deprecated(reason: "Prefix Boolean returning fields with `is_`")
  end_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  events: [PartnerShowEventType]

  """A formatted description of the start to end dates"""
  exhibition_period: String
  fair: Fair
  href: String
  images(
    """Number of images to return"""
    size: Int

    """Pass true/false to include cover or not"""
    default: Boolean
    page: Int
  ): [Image]

  """Flag showing if show has any location."""
  has_location: Boolean

  """
  Gravity doesn’t expose the `active` flag. Temporarily re-state its logic.
  """
  is_active: Boolean
  is_displayable: Boolean
  is_fair_booth: Boolean
  kind: String
  location: Location
  meta_image: Image

  """The exhibition title"""
  name: String
  partner: Partner
  press_release(format: Format): String
  start_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  status: String

  """A formatted update on upcoming status changes"""
  status_update(
    """Before this many days no update will be generated"""
    max_days: Int
  ): String
  type: String
}

type ArtworkContextSale implements Node {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!

  """A type-specific Gravity Mongo Document ID."""
  _id: String!
  cached: Int
  artworks(
    page: Int = 1
    size: Int = 25
    all: Boolean = false

    """
    List of artwork IDs to exclude from the response (irrespective of size)
    """
    exclude: [String]
  ): [Artwork]
  associated_sale: Sale
  auction_state: String @deprecated(reason: "Favor `status` for consistency with other models")

  """A bid increment policy that explains minimum bids in ranges."""
  bid_increments: [BidIncrement]

  """Auction's buyer's premium policy."""
  buyers_premium: [BuyersPremium]
  cover_image: Image
  currency: String
  description: String
  display_timely_at: String
  eligible_sale_artworks_count: Int
  end_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  event_start_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  event_end_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  href: String
  name: String
  is_auction: Boolean
  is_auction_promo: Boolean
  is_closed: Boolean
  is_open: Boolean
  is_live_open: Boolean
  is_preview: Boolean
  is_registration_closed: Boolean
  is_with_buyers_premium: Boolean
  live_start_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String

  """
  Returns a live auctions url if the sale is open and start time is after now
  """
  live_url_if_open: String
  partner: Partner
  profile: Profile
  promoted_sale: Sale
  registration_ends_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  require_bidder_approval: Boolean
  sale_artworks(page: Int = 1, size: Int = 25, all: Boolean = false): [SaleArtwork]
  sale_artworks_connection(after: String, first: Int, before: String, last: Int): SaleArtworkConnection
  sale_type: String
  start_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  status: String
  sale_artwork(id: String!): SaleArtwork
  symbol: String
}

"""An edge in a connection."""
type ArtworkEdge {
  """The item at the end of the edge"""
  node: Artwork

  """A cursor for use in pagination"""
  cursor: String!
}

union ArtworkFilterFacet = ArtworkFilterTag | ArtworkFilterGene

type ArtworkFilterGene implements Node {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!

  """A type-specific Gravity Mongo Document ID."""
  _id: String!
  cached: Int
  description: String
  name: String
  href: String
  image: Image
  count: Int

  """Artworks Elastic Search results"""
  filtered_artworks(
    aggregation_partner_cities: [String]
    aggregations: [ArtworkAggregation]
    artist_id: String
    artist_ids: [String]
    color: String
    dimension_range: String
    extra_aggregation_gene_ids: [String]
    include_artworks_by_followed_artists: Boolean
    include_medium_filter_in_aggregation: Boolean
    for_sale: Boolean
    gene_id: String
    gene_ids: [String]
    height: String
    width: String

    """A string from the list of allocations, or * to denote all mediums"""
    medium: String
    period: String
    periods: [String]
    major_periods: [String]
    partner_id: ID
    partner_cities: [String]
    price_range: String
    page: Int
    sale_id: ID
    size: Int
    sort: String
    tag_id: String
    keyword: String
  ): FilterArtworks
}

type ArtworkFilterTag implements Node {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!

  """A type-specific Gravity Mongo Document ID."""
  _id: String!
  cached: Int
  description: String
  name: String
  href: String
  image: Image
  count: Int

  """Artworks Elastic Search results"""
  filtered_artworks(
    aggregation_partner_cities: [String]
    aggregations: [ArtworkAggregation]
    artist_id: String
    artist_ids: [String]
    color: String
    dimension_range: String
    extra_aggregation_gene_ids: [String]
    include_artworks_by_followed_artists: Boolean
    include_medium_filter_in_aggregation: Boolean
    for_sale: Boolean
    gene_id: String
    gene_ids: [String]
    height: String
    width: String

    """A string from the list of allocations, or * to denote all mediums"""
    medium: String
    period: String
    periods: [String]
    major_periods: [String]
    partner_id: ID
    partner_cities: [String]
    price_range: String
    page: Int
    sale_id: ID
    size: Int
    sort: String
    tag_id: String
    keyword: String
  ): FilterArtworks
}

"""An inquiry on an Artwork"""
type ArtworkInquiry {
  artwork: Artwork!
  id: ID
  impulse_conversation_id: String
}

"""A connection to a list of items."""
type ArtworkInquiryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ArtworkInquiryEdge]
}

"""An edge in a connection."""
type ArtworkInquiryEdge {
  """The item at the end of the edge"""
  node: ArtworkInquiry

  """A cursor for use in pagination"""
  cursor: String!
}

type ArtworkItem implements Node {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!

  """A type-specific Gravity Mongo Document ID."""
  _id: String!
  additional_information(format: Format): String
  artist(
    """Use whatever is in the original response instead of making a request"""
    shallow: Boolean
  ): Artist
  artists(
    """Use whatever is in the original response instead of making a request"""
    shallow: Boolean
  ): [Artist]
  artist_names: String
  articles(size: Int): [Article]
  availability: String
  can_share_image: Boolean @deprecated(reason: "Favor `is_`-prefixed boolean attributes")
  category: String

  """Attribution class object"""
  attribution_class: AttributionClass
  collecting_institution: String
  contact_label: String

  """Pre-filled inquiry text"""
  contact_message: String

  """Returns the associated Fair/Sale/PartnerShow"""
  context: ArtworkContext
  cultural_maker: String
  date: String
  description(format: Format): String
  dimensions: dimensions

  """Returns an HTML string representing the embedded content (video)"""
  embed(width: Int = 853, height: Int = 450, autoplay: Boolean = false): String
  edition_of: String
  edition_sets: [EditionSet]
  exhibition_history(format: Format): String
  fair: Fair

  """Returns the highlighted shows and articles"""
  highlights: [Highlighted]
  href: String
  image: Image
  image_rights: String
  image_title: String
  images(size: Int): [Image]

  """Whether work can be purchased through e-commerce"""
  is_acquireable: Boolean

  """Is this artwork part of an auction that is currently running?"""
  is_biddable: Boolean

  """When in an auction, can the work be bought immediately"""
  is_buy_nowable: Boolean
  is_comparable_with_auction_results: Boolean

  """Are we able to display a contact form on artwork pages?"""
  is_contactable: Boolean @deprecated(reason: "Prefer to use is_inquireable")
  is_downloadable: Boolean
  is_embeddable_video: Boolean
  is_ecommerce: Boolean @deprecated(reason: "Should not be used to determine anything UI-level")
  is_for_sale: Boolean
  is_hangable: Boolean

  """Do we want to encourage inquiries on this work?"""
  is_inquireable: Boolean

  """Is this artwork part of an auction?"""
  is_in_auction: Boolean

  """Is this artwork part of a current show"""
  is_in_show: Boolean
  is_not_for_sale: String
  is_on_hold: String
  is_price_hidden: Boolean
  is_price_range: Boolean

  """True for inquireable artworks that have an exact price."""
  is_purchasable: Boolean
  is_saved: Boolean
  is_shareable: Boolean
  is_sold: Boolean
  is_unique: Boolean
  layer(id: String): ArtworkLayer
  layers: [ArtworkLayer]
  literature(format: Format): String
  manufacturer(format: Format): String
  medium: String
  meta: ArtworkMeta
  partner(
    """Use whatever is in the original response instead of making a request"""
    shallow: Boolean
  ): Partner
  price: String
  provenance(format: Format): String
  publisher(format: Format): String
  related(size: Int): [Artwork]
  sale: Sale
  sale_artwork(sale_id: String = null): SaleArtwork
  sale_message: String
  series(format: Format): String
  show(size: Int, active: Boolean, at_a_fair: Boolean, sort: PartnerShowSorts): PartnerShow
  shows(size: Int, active: Boolean, at_a_fair: Boolean, sort: PartnerShowSorts): [PartnerShow]
  signature(format: Format): String
  title: String
  to_s: String
  website: String
  cached: Int
}

type ArtworkLayer {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!
  artworks: [Artwork]
  description: String
  href: String
  name: String
  type: String
}

type ArtworkMeta {
  description(limit: Int = 155): String
  image: String
  title: String
}

"""The results for one of the requested aggregations"""
type ArtworksAggregationResults {
  counts: [AggregationCount]
  slice: ArtworkAggregation
}

enum ArtworkSorts {
  availability_desc @deprecated(reason: "use capital enums")
  created_at_asc @deprecated(reason: "use capital enums")
  created_at_desc @deprecated(reason: "use capital enums")
  deleted_at_asc @deprecated(reason: "use capital enums")
  deleted_at_desc @deprecated(reason: "use capital enums")
  iconicity_desc @deprecated(reason: "use capital enums")
  merchandisability_desc @deprecated(reason: "use capital enums")
  published_at_asc @deprecated(reason: "use capital enums")
  published_at_desc @deprecated(reason: "use capital enums")
  partner_updated_at_desc @deprecated(reason: "use capital enums")
  title_asc @deprecated(reason: "use capital enums")
  title_desc @deprecated(reason: "use capital enums")
  AVAILABILITY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  ICONICITY_DESC
  MERCHANDISABILITY_DESC
  PARTNER_UPDATED_AT_DESC
  PUBLISHED_AT_ASC
  PUBLISHED_AT_DESC
  TITLE_ASC
  TITLE_DESC
}

"""An asset which is assigned to a consignment submission"""
type Asset {
  """Convection asset ID."""
  id: String!

  """The convection submission ID"""
  submission_id: String

  """The gemini token for the asset"""
  gemini_token: String

  """The type of the asset"""
  asset_type: String
}

"""Fields of an attachment (currently from Radiation)"""
type Attachment {
  """Attachment id."""
  id: String!

  """Content type of file."""
  content_type: String!

  """File name."""
  file_name: String!
  download_url: String!
}

"""Collection of fields that describe attribution class"""
type AttributionClass {
  id: String!

  """Shortest form of attribution class display"""
  name: String

  """
  Descriptive phrase used as companion for attribution class name display
  """
  info: String

  """Longer version of attribution class display"""
  short_description: String

  """Long descriptive phrase used as companion for short_description"""
  long_description: String
}

"""In centimeters."""
type AuctionLotDimensions {
  width: Float
  height: Float
  depth: Float
}

type AuctionLotEstimate {
  low: Float
  high: Float
  display: String
}

type AuctionLotImages {
  larger: Image
  thumbnail: Image
}

type AuctionResult implements Node {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!
  title: String
  artist_id: String!
  date(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  date_text: String
  medium_text: String
  category_text: String
  dimension_text: String
  dimensions: AuctionLotDimensions
  organization: String
  sale_date(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  sale_date_text: String
  sale_title: String
  currency: String
  description: String
  external_url: String
  images: AuctionLotImages
  estimate: AuctionLotEstimate
  price_realized: AuctionResultPriceRealized
}

"""A connection to a list of items."""
type AuctionResultConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AuctionResultEdge]
  pageCursors: PageCursors
  totalCount: Int
}

"""An edge in a connection."""
type AuctionResultEdge {
  """The item at the end of the edge"""
  node: AuctionResult

  """A cursor for use in pagination"""
  cursor: String!
}

type AuctionResultPriceRealized {
  cents: Float
  cents_usd: Float
  display(
    """Passes in to numeral, such as `'0.00'`"""
    format: String = ""
  ): String
}

enum AuctionResultSorts {
  DATE_DESC
  PRICE_AND_DATE_DESC
  ESTIMATE_AND_DATE_DESC
}

type Author {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!
  name: String
  href: String @deprecated(reason: "Profiles have been removed and thus author hrefs don't exist anymore.")
  profile_handle: String
}

type Bidder {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!
  created_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  pin: String
  qualified_for_bidding: Boolean
  sale: Sale
}

type BidderPosition {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!
  created_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  updated_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  processed_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  display_max_bid_amount_dollars: String @deprecated(reason: "Favor `max_bid`")
  display_suggested_next_bid_dollars: String @deprecated(reason: "Favor `suggested_next_bid`")
  highest_bid: HighestBid
  is_active: Boolean
  is_retracted: Boolean
  is_with_bid_max: Boolean
  is_winning: Boolean
  max_bid: BidderPositionMaxBid
  max_bid_amount_cents: Int @deprecated(reason: "Favor `max_bid`")
  sale_artwork: SaleArtwork
  suggested_next_bid: BidderPositionSuggestedNextBid
  suggested_next_bid_cents: Int @deprecated(reason: "Favor `suggested_next_bid`")
}

input BidderPositionInput {
  sale_id: String!
  artwork_id: String!
  max_bid_amount_cents: Float!
  clientMutationId: String
}

type BidderPositionMaxBid {
  """A formatted price with various currency formatting options."""
  amount(
    decimal: String = "."

    """Allows control of symbol position (%v = value, %s = symbol)"""
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  """An amount of money expressed in cents."""
  cents: Float

  """A pre-formatted price."""
  display: String
}

type BidderPositionPayload {
  result: BidderPositionResult
  clientMutationId: String
}

type BidderPositionResult {
  status: String!
  message_header: String
  message_description_md: String
  position: BidderPosition
}

type BidderPositionSuggestedNextBid {
  """A formatted price with various currency formatting options."""
  amount(
    decimal: String = "."

    """Allows control of symbol position (%v = value, %s = symbol)"""
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  """An amount of money expressed in cents."""
  cents: Float

  """A pre-formatted price."""
  display: String
}

type BidIncrement {
  amount: Int
  from: Int
  to: Int
}

type BidIncrementsFormatted {
  cents: Float
  display: String
}

type BuyersPremium {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!

  """A type-specific Gravity Mongo Document ID."""
  _id: String!

  """A formatted price with various currency formatting options."""
  amount(
    decimal: String = "."

    """Allows control of symbol position (%v = value, %s = symbol)"""
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String
  cents: Int
  percent: Float
}

"""Fields of partner category (currently from Gravity)."""
type Category {
  id: String!
  category_type: String
  internal: Boolean
  name: String
}

enum CategoryType {
  GALLERY
  INSTITUTION
}

type Collection implements Node {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!

  """A type-specific Gravity Mongo Document ID."""
  _id: String!
  cached: Int
  artworks_connection(after: String, first: Int, before: String, last: Int, private: Boolean = false, sort: CollectionSorts = POSITION_DESC): ArtworkConnection
  description: String!
  default: Boolean!
  name: String!
  private: Boolean!
  slug: String!
}

enum CollectionSorts {
  POSITION_ASC
  POSITION_DESC
}

type CollectorProfileType {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!
  email: String
  name: String
  confirmed_buyer_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  collector_level: Int
  self_reported_purchases: String
  loyalty_applicant_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  professional_buyer_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  professional_buyer_applied_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  intents: [String]
}

"""A work to be consigned to the user"""
type ConsignmentSubmission implements Node {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!

  """A type-specific Gravity Mongo Document ID."""
  _id: String!

  """The gravity ID for an Artist"""
  artist_id: String!

  """Does the artwork come with an certificate of authenticity?"""
  authenticity_certificate: Boolean

  """The set in which to put the work"""
  category: SubmissionCategoryAggregation

  """The depth of the work"""
  depth: String

  """A string, either CM or IN"""
  dimensions_metric: SubmissionDimensionAggregation

  """Is the work a part of an edition"""
  edition: Boolean

  """The number of the individual work if in a set"""
  edition_number: String

  """The whole size of the set of works"""
  edition_size: Int

  """The height of the work"""
  height: String

  """The city where the work currently resides"""
  location_city: String

  """The country where the work currently resides"""
  location_country: String

  """The state where the work currently resides"""
  location_state: String

  """The materials in which the work is created"""
  medium: String

  """The history of an work"""
  provenance: String

  """Is this work signed?"""
  signature: Boolean

  """The name of the work"""
  title: String

  """The internal state of the work, e.g. draft/submitted"""
  state: SubmissionStateAggregation

  """The width of the work"""
  width: String

  """The year the work was created"""
  year: String

  """The user who submitted the work"""
  user_id: ID
  artist: Artist
}

"""A connection to a list of items."""
type ConsignmentSubmissionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ConsignmentSubmissionEdge]
}

"""An edge in a connection."""
type ConsignmentSubmissionEdge {
  """The item at the end of the edge"""
  node: ConsignmentSubmission

  """A cursor for use in pagination"""
  cursor: String!
}

type Convection {
  geminiTemplateKey: String!
}

"""A conversation."""
type Conversation implements Node {
  """A globally unique ID."""
  __id: ID!

  """Impulse id."""
  id: String

  """Gravity inquiry id."""
  inquiry_id: String

  """The participant who initiated the conversation"""
  from: ConversationInitiator!

  """The participant(s) responding to the conversation"""
  to: ConversationResponder!
  buyer_outcome: String
  buyer_outcome_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  created_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  purchase_request: Boolean
  from_last_viewed_message_id: String
  initial_message: String!

  """This is a snippet of text from the last message."""
  last_message: String
  last_message_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String

  """Impulse id of the last message."""
  last_message_id: String

  """True if user/conversation initiator is a recipient."""
  is_last_message_to_user: Boolean

  """
  Timestamp if the user opened the last message, null in all other cases
  """
  last_message_open: String @deprecated(reason: "Prefer to use `unread`")

  """
  Delivery id if the user is a recipient of the last message, null otherwise.
  """
  last_message_delivery_id: String

  """Only the artworks discussed in the conversation."""
  artworks: [Artwork]

  """The artworks and/or partner shows discussed in the conversation."""
  items: [ConversationItem]

  """A connection for all messages in a single conversation"""
  messages(sort: sort, after: String, first: Int, before: String, last: Int): MessageConnection

  """True if there is an unread message by the user."""
  unread: Boolean
}

"""A connection to a list of items."""
type ConversationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ConversationEdge]
  totalUnreadCount: Int
}

"""An edge in a connection."""
type ConversationEdge {
  """The item at the end of the edge"""
  node: Conversation

  """A cursor for use in pagination"""
  cursor: String!
}

"""The participant who started the conversation, currently always a User"""
type ConversationInitiator {
  """Impulse id."""
  id: String!

  """The type of participant, e.g. Partner or User"""
  type: String!
  name: String!
  email: String!
  initials(length: Int = 3): String
}

type ConversationItem {
  item: ConversationItemType
  title: String
  permalink: String
}

union ConversationItemType = Artwork | Show

"""
The participant responding to the conversation, currently always a Partner
"""
type ConversationResponder {
  """Impulse id."""
  id: String!

  """The type of participant, e.g. Partner or User"""
  type: String!
  name: String!

  """
  An array of Impulse IDs that correspond to all email addresses that messages should be sent to
  """
  reply_to_impulse_ids: [String]!
  initials(length: Int = 3): String
}

type coordinates {
  lat: Float
  lng: Float
}

input CreateBidderInput {
  sale_id: String!
  clientMutationId: String
}

type CreateBidderPayload {
  bidder: Bidder
  clientMutationId: String
}

input CreateGeminiEntryForAssetInput {
  """The path to the file"""
  source_key: String!

  """The template key, this is `name` in the asset request"""
  template_key: String!

  """The S3 bucket where the file was uploaded"""
  source_bucket: String!

  """
  Additional JSON data to pass through gemini, should deiinitely contain an `id` and a `_type`
  """
  metadata: JSON!
  clientMutationId: String
}

type CreateGeminiEntryForAssetPayload {
  asset: GeminiEntry
  clientMutationId: String
}

input CreateSubmissionMutationInput {
  """The gravity ID for an Artist"""
  artist_id: String!

  """Does the artwork come with an certificate of authenticity?"""
  authenticity_certificate: Boolean

  """The set in which to put the work"""
  category: SubmissionCategoryAggregation

  """The depth of the work"""
  depth: String

  """A string, either CM or IN"""
  dimensions_metric: SubmissionDimensionAggregation

  """Is the work a part of an edition"""
  edition: Boolean

  """The number of the individual work if in a set"""
  edition_number: String

  """The whole size of the set of works"""
  edition_size: Int

  """The height of the work"""
  height: String

  """The city where the work currently resides"""
  location_city: String

  """The country where the work currently resides"""
  location_country: String

  """The state where the work currently resides"""
  location_state: String

  """The materials in which the work is created"""
  medium: String

  """The history of an work"""
  provenance: String

  """Is this work signed?"""
  signature: Boolean

  """The name of the work"""
  title: String

  """The internal state of the work, e.g. draft/submitted"""
  state: SubmissionStateAggregation

  """The width of the work"""
  width: String

  """The year the work was created"""
  year: String

  """The user who submitted the work"""
  user_id: ID
  clientMutationId: String
}

type CreateSubmissionMutationPayload {
  consignment_submission: ConsignmentSubmission
  clientMutationId: String
}

"""An asset which is assigned to a consignment submission"""
type Credentials {
  """The key to use with S3."""
  credentials: String!

  """A base64 encoded version of the S3 policy"""
  policy_encoded: String!

  """The s3 policy document for your request"""
  policy_document: S3PolicyDocumentType!

  """The signature for your asset."""
  signature: String!
}

type CreditCard {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!

  """A type-specific Gravity Mongo Document ID."""
  _id: String!

  """Brand of credit card"""
  brand: String

  """Name on the credit card"""
  name: String

  """Last four digits on the credit card"""
  last_digits: String

  """Credit card's expiration month"""
  expiration_month: Int

  """Credit card's expiration year"""
  expiration_year: Int
}

input CreditCardInput {
  token: String!
  clientMutationId: String
}

type CreditCardPayload {
  credit_card: CreditCard
  clientMutationId: String
}

type CroppedImageUrl {
  width: Int
  height: Int
  url: String
}

type DaySchedule {
  start_time: Int
  end_time: Int
  day_of_week: String
}

type DeepZoom {
  Image: DeepZoomImage
}

type DeepZoomImage {
  Format: String
  Overlap: Int
  Size: DeepZoomImageSize
  TileSize: Int
  Url: String
  xmlns: String
}

type DeepZoomImageSize {
  Width: Int
  Height: Int
}

"""Fields of a delivery (currently from Radiation)"""
type Delivery {
  """Delivery id."""
  id: String!

  """Masked email w/ display name."""
  full_transformed_email: String!
  delivered_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  bounced_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  opened_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  clicked_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
}

type dimensions {
  in: String
  cm: String
}

input EditableLocation {
  """First line of an address"""
  address: String

  """Second line of an address"""
  address_2: String

  """The city the location is based in"""
  city: String

  """The county the location is based in"""
  country: String

  """An optional display string for the location"""
  summary: String

  """Postal code for a string"""
  postal_code: String

  """The (optional) name of the state for location"""
  state: String

  """The (optional) state code of the state for location"""
  state_code: String
}

type EditionSet {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!
  dimensions: dimensions
  edition_of: String
  is_acquireable: Boolean
  is_for_sale: Boolean
  is_sold: Boolean
  price: String @deprecated(reason: "Prefer to use `sale_message`.")
  sale_message: String
}

input EndSaleInput {
  sale_id: String
  clientMutationId: String
}

type EndSalePayload {
  sale: Sale
  clientMutationId: String
}

enum EventStatus {
  closed @deprecated(reason: "use capital enums")
  current @deprecated(reason: "use capital enums")
  running @deprecated(reason: "use capital enums")
  upcoming @deprecated(reason: "use capital enums")
  CLOSED
  CURRENT
  RUNNING
  UPCOMING
}

type ExternalPartner {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!
  city: String
  name: String
}

type Fair {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!

  """A type-specific Gravity Mongo Document ID."""
  _id: String!
  cached: Int
  banner_size: String
  has_full_feature: Boolean
  has_homepage_section: Boolean
  has_large_banner: Boolean
  has_listing: Boolean
  href: String
  image: Image

  """Are we currently in the fair's active period?"""
  is_active: Boolean
  mobile_image: Image
  is_published: Boolean
  location: Location
  name: String
  profile: Profile
  shows_connection(
    """Number of artworks to return"""
    section: String

    """Sorts for shows in a fair"""
    sort: ShowSort = FEATURED_DESC
    after: String
    first: Int
    before: String
    last: Int
  ): ShowConnection
  start_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  end_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  organizer: organizer
  published: Boolean @deprecated(reason: "Prefix Boolean returning fields with `is_`")
  tagline: String
}

enum FairSorts {
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  START_AT_ASC
  START_AT_DESC
}

type FeaturedLinkItem {
  """Attempt to get the ID of the entity of the FeaturedLink"""
  id: String
  href: String
  image: Image
  initials(length: Int = 3): String
  subtitle: String
  title: String
}

type FilterArtworks implements Node {
  """The ID of the object."""
  __id: ID!

  """Returns aggregation counts for the given filter query."""
  aggregations: [ArtworksAggregationResults]
  artworks_connection(sort: String, after: String, first: Int, before: String, last: Int): ArtworkConnection @deprecated(reason: "Favour artwork connections that take filter arguments.")
  counts: FilterArtworksCounts
  followed_artists_total: Int @deprecated(reason: "Favor `favor counts.followed_artists`")

  """Artwork results."""
  hits: [Artwork]

  """Returns a list of merchandisable artists sorted by merch score."""
  merchandisable_artists: [Artist]
  total: Int @deprecated(reason: "Favor `counts.total`")
  facet: ArtworkFilterFacet
}

type FilterArtworksCounts {
  total(
    """Returns a `String` when format is specified. e.g.`'0,0.0000''`"""
    format: String
    label: String
  ): FormattedNumber
  followed_artists(
    """Returns a `String` when format is specified. e.g.`'0,0.0000''`"""
    format: String
    label: String
  ): FormattedNumber
}

type FilterPartners {
  aggregations: [PartnersAggregationResults]
  hits: [Partner]
  total: Int
}

type FilterSaleArtworks {
  """Returns aggregation counts for the given filter query."""
  aggregations: [SaleArtworksAggregationResults]
  counts: FilterSaleArtworksCounts

  """Sale Artwork results."""
  hits: [SaleArtwork]
}

type FilterSaleArtworksCounts {
  total(
    """Returns a `String` when format is specified. e.g.`'0,0.0000''`"""
    format: String
    label: String
  ): FormattedNumber
  followed_artists(
    """Returns a `String` when format is specified. e.g.`'0,0.0000''`"""
    format: String
    label: String
  ): FormattedNumber
}

type FollowArtist {
  artist: Artist
  auto: Boolean

  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!
}

"""A connection to a list of items."""
type FollowArtistConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FollowArtistEdge]
}

type FollowArtistCounts {
  artists: Int
}

"""An edge in a connection."""
type FollowArtistEdge {
  """The item at the end of the edge"""
  node: FollowArtist

  """A cursor for use in pagination"""
  cursor: String!
}

input FollowArtistInput {
  artist_id: String
  unfollow: Boolean = false
  clientMutationId: String
}

type FollowArtistPayload {
  artist: Artist

  """Popular artists"""
  popular_artists(
    """If true, will exclude followed artists for the user"""
    exclude_followed_artists: Boolean

    """
    Exclude these ids from results, may result in all artists being excluded.
    """
    exclude_artist_ids: [String]

    """Number of results to return"""
    size: Int
  ): PopularArtists
  clientMutationId: String
}

type FollowArtists {
  artists: [Artist]
  counts: FollowArtistCounts
}

type FollowedArtistsArtworksGroup implements Node {
  """A globally unique ID."""
  __id: ID!

  """List of artworks in this group."""
  artworks: [Artwork]
  artists: String
  summary: String
  image: Image
}

"""A connection to a list of items."""
type FollowedArtistsArtworksGroupConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FollowedArtistsArtworksGroupEdge]
}

"""An edge in a connection."""
type FollowedArtistsArtworksGroupEdge {
  """The item at the end of the edge"""
  node: FollowedArtistsArtworksGroup

  """A cursor for use in pagination"""
  cursor: String!
}

type FollowGene {
  gene: Gene

  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!
}

"""A connection to a list of items."""
type FollowGeneConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FollowGeneEdge]
}

"""An edge in a connection."""
type FollowGeneEdge {
  """The item at the end of the edge"""
  node: FollowGene

  """A cursor for use in pagination"""
  cursor: String!
}

input FollowGeneInput {
  gene_id: String
  clientMutationId: String
}

type FollowGenePayload {
  gene: Gene
  clientMutationId: String
}

type FollowsAndSaves {
  """
  A list of published artworks by followed artists (grouped by date and artists).
  """
  bundledArtworksByArtist(sort: ArtworkSorts, after: String, first: Int, before: String, last: Int): FollowedArtistsArtworksGroupConnection
}

enum Format {
  HTML
  PLAIN
  markdown @deprecated(reason: "deprecated")
}

"""
The `FormattedNumber` type represents a number that can optionally be returnedas
a formatted String. It does not try to coerce the type.
"""
scalar FormattedNumber

"""An entry from gemini"""
type GeminiEntry {
  """The token that represents the gemini entry."""
  token: String!
}

type Gene implements Node {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!

  """A type-specific Gravity Mongo Document ID."""
  _id: String!
  cached: Int
  artists: [Artist]
  artists_connection(after: String, first: Int, before: String, last: Int): ArtistConnection
  artworks_connection(
    aggregation_partner_cities: [String]
    aggregations: [ArtworkAggregation]
    artist_id: String
    artist_ids: [String]
    color: String
    dimension_range: String
    extra_aggregation_gene_ids: [String]
    include_artworks_by_followed_artists: Boolean
    include_medium_filter_in_aggregation: Boolean
    for_sale: Boolean
    gene_id: String
    gene_ids: [String]
    height: String
    width: String

    """A string from the list of allocations, or * to denote all mediums"""
    medium: String
    period: String
    periods: [String]
    major_periods: [String]
    partner_id: ID
    partner_cities: [String]
    price_range: String
    page: Int
    sale_id: ID
    size: Int
    sort: String
    tag_id: String
    keyword: String
    after: String
    first: Int
    before: String
    last: Int
  ): GeneArtworksConnection
  description: String
  display_name: String

  """Artworks Elastic Search results"""
  filtered_artworks(
    aggregation_partner_cities: [String]
    aggregations: [ArtworkAggregation]
    artist_id: String
    artist_ids: [String]
    color: String
    dimension_range: String
    extra_aggregation_gene_ids: [String]
    include_artworks_by_followed_artists: Boolean
    include_medium_filter_in_aggregation: Boolean
    for_sale: Boolean
    gene_id: String
    gene_ids: [String]
    height: String
    width: String

    """A string from the list of allocations, or * to denote all mediums"""
    medium: String
    period: String
    periods: [String]
    major_periods: [String]
    partner_id: ID
    partner_cities: [String]
    price_range: String
    page: Int
    sale_id: ID
    size: Int
    sort: String
    tag_id: String
    keyword: String
  ): FilterArtworks
  href: String
  image: Image
  is_published: Boolean
  is_followed: Boolean
  mode: String
  name: String

  """A list of genes similar to the specified gene"""
  similar(
    """
    Array of gene ids (not slugs) to exclude, may result in all genes being excluded.
    """
    exclude_gene_ids: [String]
    after: String
    first: Int
    before: String
    last: Int
  ): GeneConnection
  trending_artists(sample: Int): [Artist]
}

"""A connection to a list of items."""
type GeneArtworksConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GeneArtworksEdge]

  """Returns aggregation counts for the given filter query."""
  aggregations: [ArtworksAggregationResults]
  counts: FilterArtworksCounts
}

"""An edge in a connection."""
type GeneArtworksEdge {
  """The item at the end of the edge"""
  node: Artwork

  """A cursor for use in pagination"""
  cursor: String!
}

"""A connection to a list of items."""
type GeneConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GeneEdge]
}

"""An edge in a connection."""
type GeneEdge {
  """The item at the end of the edge"""
  node: Gene

  """A cursor for use in pagination"""
  cursor: String!
}

type GeneFamily {
  id: String!
  name: String!
  genes: [Gene]
}

"""A connection to a list of items."""
type GeneFamilyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GeneFamilyEdge]
}

"""An edge in a connection."""
type GeneFamilyEdge {
  """The item at the end of the edge"""
  node: GeneFamily

  """A cursor for use in pagination"""
  cursor: String!
}

type GeneItem implements Node {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!

  """A type-specific Gravity Mongo Document ID."""
  _id: String!
  cached: Int
  artists: [Artist]
  artists_connection(after: String, first: Int, before: String, last: Int): ArtistConnection
  artworks_connection(
    aggregation_partner_cities: [String]
    aggregations: [ArtworkAggregation]
    artist_id: String
    artist_ids: [String]
    color: String
    dimension_range: String
    extra_aggregation_gene_ids: [String]
    include_artworks_by_followed_artists: Boolean
    include_medium_filter_in_aggregation: Boolean
    for_sale: Boolean
    gene_id: String
    gene_ids: [String]
    height: String
    width: String

    """A string from the list of allocations, or * to denote all mediums"""
    medium: String
    period: String
    periods: [String]
    major_periods: [String]
    partner_id: ID
    partner_cities: [String]
    price_range: String
    page: Int
    sale_id: ID
    size: Int
    sort: String
    tag_id: String
    keyword: String
    after: String
    first: Int
    before: String
    last: Int
  ): GeneArtworksConnection
  description: String
  display_name: String

  """Artworks Elastic Search results"""
  filtered_artworks(
    aggregation_partner_cities: [String]
    aggregations: [ArtworkAggregation]
    artist_id: String
    artist_ids: [String]
    color: String
    dimension_range: String
    extra_aggregation_gene_ids: [String]
    include_artworks_by_followed_artists: Boolean
    include_medium_filter_in_aggregation: Boolean
    for_sale: Boolean
    gene_id: String
    gene_ids: [String]
    height: String
    width: String

    """A string from the list of allocations, or * to denote all mediums"""
    medium: String
    period: String
    periods: [String]
    major_periods: [String]
    partner_id: ID
    partner_cities: [String]
    price_range: String
    page: Int
    sale_id: ID
    size: Int
    sort: String
    tag_id: String
    keyword: String
  ): FilterArtworks
  href: String
  image: Image
  is_published: Boolean
  is_followed: Boolean
  mode: String
  name: String

  """A list of genes similar to the specified gene"""
  similar(
    """
    Array of gene ids (not slugs) to exclude, may result in all genes being excluded.
    """
    exclude_gene_ids: [String]
    after: String
    first: Int
    before: String
    last: Int
  ): GeneConnection
  trending_artists(sample: Int): [Artist]
}

type HighestBid {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!
  created_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  number: Int
  is_cancelled: Boolean

  """A formatted price with various currency formatting options."""
  amount(
    decimal: String = "."

    """Allows control of symbol position (%v = value, %s = symbol)"""
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String
  cents: Int
  display: String
  amount_cents: Int @deprecated(reason: "Favor `cents`")
  display_amount_dollars: String @deprecated(reason: "Favor `display`")
}

union Highlighted = HighlightedShow | HighlightedArticle

type HighlightedArticle implements Node {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!
  cached: Int
  author: Author
  channel_id: String
  contributing_authors: [Author]
  href: String
  published_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  slug: String
  thumbnail_title: String
  thumbnail_teaser: String
  thumbnail_image: Image
  tier: Int
  title: String
  updated_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
}

type HighlightedShow implements Node {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!

  """A type-specific Gravity Mongo Document ID."""
  _id: String!
  cached: Int
  artists: [Artist]
  artworks(
    all: Boolean

    """
    List of artwork IDs to exclude from the response (irrespective of size)
    """
    exclude: [String]
    for_sale: Boolean
    published: Boolean = true
    page: Int = 1

    """Number of artworks to return"""
    size: Int = 25
  ): [Artwork]
  counts: PartnerShowCounts
  cover_image: Image
  created_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  description: String
  displayable: Boolean @deprecated(reason: "Prefix Boolean returning fields with `is_`")
  end_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  events: [PartnerShowEventType]

  """A formatted description of the start to end dates"""
  exhibition_period: String
  fair: Fair
  href: String
  images(
    """Number of images to return"""
    size: Int

    """Pass true/false to include cover or not"""
    default: Boolean
    page: Int
  ): [Image]

  """Flag showing if show has any location."""
  has_location: Boolean

  """
  Gravity doesn’t expose the `active` flag. Temporarily re-state its logic.
  """
  is_active: Boolean
  is_displayable: Boolean
  is_fair_booth: Boolean
  kind: String
  location: Location
  meta_image: Image

  """The exhibition title"""
  name: String
  partner: Partner
  press_release(format: Format): String
  start_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  status: String

  """A formatted update on upcoming status changes"""
  status_update(
    """Before this many days no update will be generated"""
    max_days: Int
  ): String
  type: String
}

type HomePage {
  """Single artist module to show on the home screen."""
  artist_module(
    """Module identifier."""
    key: HomePageArtistModuleTypes
  ): HomePageArtistModule

  """Artist modules to show on the home screen"""
  artist_modules: [HomePageArtistModule]

  """Single artwork module to show on the home screen"""
  artwork_module(
    """ID of followed artist to target for related artist rails"""
    followed_artist_id: String

    """ID of generic gene rail to target"""
    generic_gene_id: String

    """ID of generic gene rail to target"""
    id: String

    """Module key"""
    key: String

    """ID of related artist to target for related artist rails"""
    related_artist_id: String
  ): HomePageArtworkModule

  """Artwork modules to show on the home screen"""
  artwork_modules(
    """
    Maximum number of followed genes to return, disable with a negative number
    """
    max_followed_gene_rails: Int = 1

    """
    Maximum number of modules to return, disable limit with a negative number
    """
    max_rails: Int = 8

    """The preferred order of modules, defaults to order returned by Gravity"""
    order: [HomePageArtworkModuleTypes]

    """Exclude certain modules"""
    exclude: [HomePageArtworkModuleTypes] = []
  ): [HomePageArtworkModule]

  """A list of enabled hero units to show on the requested platform"""
  hero_units(platform: HomePageHeroUnitPlatform!): [HomePageHeroUnit]
  fairs_module: HomePageFairsModule
}

type HomePageArtistModule implements Node {
  """A globally unique ID."""
  __id: ID!

  """Module identifier."""
  key: String
  results: [Artist]
}

enum HomePageArtistModuleTypes {
  """Artists recommended for the specific user."""
  SUGGESTED

  """The trending artists."""
  TRENDING

  """The most searched for artists."""
  POPULAR
}

type HomePageArtworkModule implements Node {
  """A globally unique ID."""
  __id: ID!
  context: HomePageModuleContext
  display: String @deprecated(reason: "Favor `is_`-prefixed Booleans (*and* this should be a Boolean)")
  is_displayable: Boolean
  key: String
  params: HomePageModulesParams
  results: [Artwork]
  title: String
}

enum HomePageArtworkModuleTypes {
  ACTIVE_BIDS
  CURRENT_FAIRS
  FOLLOWED_ARTIST
  FOLLOWED_ARTISTS
  FOLLOWED_GALLERIES
  FOLLOWED_GENES
  GENERIC_GENES
  LIVE_AUCTIONS
  RECOMMENDED_WORKS
  RELATED_ARTISTS
  SAVED_WORKS
  RECENTLY_VIEWED_WORKS
  SIMILAR_TO_RECENTLY_VIEWED
  SIMILAR_TO_SAVED_WORKS
}

type HomePageFairsModule {
  results: [Fair]!
}

type HomePageHeroUnit {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!

  """A type-specific Gravity Mongo Document ID."""
  _id: String!
  cached: Int
  mode: HomePageHeroUnitMode
  heading: String
  href: String
  title: String
  title_image_url(retina: Boolean): String
  subtitle: String
  link_text: String
  credit_line: String

  """The image to show, on desktop this defaults to the wide version."""
  background_image_url(version: HomePageHeroUnitImageVersion): String
}

enum HomePageHeroUnitImageVersion {
  WIDE
  NARROW
}

enum HomePageHeroUnitMode {
  LEFT_DARK
  LEFT_LIGHT
  CENTERED_DARK
  CENTERED_LIGHT
  RIGHT_DARK
  RIGHT_LIGHT
}

enum HomePageHeroUnitPlatform {
  MOBILE
  DESKTOP
  MARTSY
}

union HomePageModuleContext = HomePageModuleContextFair | HomePageModuleContextFollowArtists | HomePageModuleContextFollowedArtist | HomePageModuleContextGene | HomePageModuleContextRelatedArtist | HomePageModuleContextSale | HomePageModuleContextTrending

type HomePageModuleContextFair {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!

  """A type-specific Gravity Mongo Document ID."""
  _id: String!
  cached: Int
  banner_size: String
  has_full_feature: Boolean
  has_homepage_section: Boolean
  has_large_banner: Boolean
  has_listing: Boolean
  href: String
  image: Image

  """Are we currently in the fair's active period?"""
  is_active: Boolean
  mobile_image: Image
  is_published: Boolean
  location: Location
  name: String
  profile: Profile
  shows_connection(
    """Number of artworks to return"""
    section: String

    """Sorts for shows in a fair"""
    sort: ShowSort = FEATURED_DESC
    after: String
    first: Int
    before: String
    last: Int
  ): ShowConnection
  start_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  end_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  organizer: organizer
  published: Boolean @deprecated(reason: "Prefix Boolean returning fields with `is_`")
  tagline: String
}

type HomePageModuleContextFollowArtists {
  artists: [Artist]
  counts: FollowArtistCounts
}

type HomePageModuleContextFollowedArtist {
  artist: Artist
}

type HomePageModuleContextGene implements Node {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!

  """A type-specific Gravity Mongo Document ID."""
  _id: String!
  cached: Int
  artists: [Artist]
  artists_connection(after: String, first: Int, before: String, last: Int): ArtistConnection
  artworks_connection(
    aggregation_partner_cities: [String]
    aggregations: [ArtworkAggregation]
    artist_id: String
    artist_ids: [String]
    color: String
    dimension_range: String
    extra_aggregation_gene_ids: [String]
    include_artworks_by_followed_artists: Boolean
    include_medium_filter_in_aggregation: Boolean
    for_sale: Boolean
    gene_id: String
    gene_ids: [String]
    height: String
    width: String

    """A string from the list of allocations, or * to denote all mediums"""
    medium: String
    period: String
    periods: [String]
    major_periods: [String]
    partner_id: ID
    partner_cities: [String]
    price_range: String
    page: Int
    sale_id: ID
    size: Int
    sort: String
    tag_id: String
    keyword: String
    after: String
    first: Int
    before: String
    last: Int
  ): GeneArtworksConnection
  description: String
  display_name: String

  """Artworks Elastic Search results"""
  filtered_artworks(
    aggregation_partner_cities: [String]
    aggregations: [ArtworkAggregation]
    artist_id: String
    artist_ids: [String]
    color: String
    dimension_range: String
    extra_aggregation_gene_ids: [String]
    include_artworks_by_followed_artists: Boolean
    include_medium_filter_in_aggregation: Boolean
    for_sale: Boolean
    gene_id: String
    gene_ids: [String]
    height: String
    width: String

    """A string from the list of allocations, or * to denote all mediums"""
    medium: String
    period: String
    periods: [String]
    major_periods: [String]
    partner_id: ID
    partner_cities: [String]
    price_range: String
    page: Int
    sale_id: ID
    size: Int
    sort: String
    tag_id: String
    keyword: String
  ): FilterArtworks
  href: String
  image: Image
  is_published: Boolean
  is_followed: Boolean
  mode: String
  name: String

  """A list of genes similar to the specified gene"""
  similar(
    """
    Array of gene ids (not slugs) to exclude, may result in all genes being excluded.
    """
    exclude_gene_ids: [String]
    after: String
    first: Int
    before: String
    last: Int
  ): GeneConnection
  trending_artists(sample: Int): [Artist]
}

type HomePageModuleContextRelatedArtist {
  artist: Artist
  based_on: Artist
}

type HomePageModuleContextSale implements Node {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!

  """A type-specific Gravity Mongo Document ID."""
  _id: String!
  cached: Int
  artworks(
    page: Int = 1
    size: Int = 25
    all: Boolean = false

    """
    List of artwork IDs to exclude from the response (irrespective of size)
    """
    exclude: [String]
  ): [Artwork]
  associated_sale: Sale
  auction_state: String @deprecated(reason: "Favor `status` for consistency with other models")

  """A bid increment policy that explains minimum bids in ranges."""
  bid_increments: [BidIncrement]

  """Auction's buyer's premium policy."""
  buyers_premium: [BuyersPremium]
  cover_image: Image
  currency: String
  description: String
  display_timely_at: String
  eligible_sale_artworks_count: Int
  end_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  event_start_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  event_end_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  href: String
  name: String
  is_auction: Boolean
  is_auction_promo: Boolean
  is_closed: Boolean
  is_open: Boolean
  is_live_open: Boolean
  is_preview: Boolean
  is_registration_closed: Boolean
  is_with_buyers_premium: Boolean
  live_start_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String

  """
  Returns a live auctions url if the sale is open and start time is after now
  """
  live_url_if_open: String
  partner: Partner
  profile: Profile
  promoted_sale: Sale
  registration_ends_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  require_bidder_approval: Boolean
  sale_artworks(page: Int = 1, size: Int = 25, all: Boolean = false): [SaleArtwork]
  sale_artworks_connection(after: String, first: Int, before: String, last: Int): SaleArtworkConnection
  sale_type: String
  start_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  status: String
  sale_artwork(id: String!): SaleArtwork
  symbol: String
}

type HomePageModuleContextTrending {
  artists: [Artist]
}

type HomePageModulesParams {
  followed_artist_id: ID
  gene_id: String
  id: ID
  medium: String
  price_range: String
  related_artist_id: ID
}

type Image {
  aspect_ratio: Float
  caption: String
  cropped(width: Int!, height: Int!, version: [String]): CroppedImageUrl
  deep_zoom: DeepZoom
  href: String
  height: Int

  """A type-specific ID."""
  id: String
  image_url: String
  image_versions: [String]
  is_default: Boolean
  is_zoomable: Boolean
  max_tiled_height: Int
  max_tiled_width: Int
  original_height: Int
  original_width: Int
  orientation: String

  """Value to use when `padding-bottom` for fluid image placeholders"""
  placeholder: String
  position: Int
  resized(width: Int, height: Int, version: [String]): ResizedImageUrl
  tile_base_url: String
  tile_format: String
  tile_size: Int
  title: String
  width: Int
  url(version: [String]): String
  versions: [String]
}

enum Intents {
  BUY_ART_AND_DESIGN
  SELL_ART_AND_DESIGN
  RESEARCH_ART_PRICES
  LEARN_ABOUT_ART
  FIND_ART_EXHIBITS
  READ_ART_MARKET_NEWS
}

"""Fields of an invoice (currently from Lewitt)"""
type Invoice implements Node {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!

  """Lewitt's invoice id."""
  lewitt_invoice_id: String!

  """Link to public checkout page."""
  payment_url: String

  """Current state of invoice."""
  state: InvoiceState

  """A formatted price with various currency formatting options."""
  total(
    decimal: String = "."

    """Allows control of symbol position (%v = value, %s = symbol)"""
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String
}

enum InvoiceState {
  UNPAID
  PAID
  VOID
  REFUNDED
}

union Item = ArtistItem | ArtworkItem | FeaturedLinkItem | GeneItem

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Location {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!
  cached: Int
  address: String
  address_2: String
  city: String
  country: String
  coordinates: coordinates
  day_schedules: [DaySchedule]
  display: String
  phone: String
  postal_code: String
  state: String
}

type LotStanding {
  """Your bid if it is currently winning"""
  active_bid: BidderPosition
  bidder: Bidder

  """You are winning and reserve is met"""
  is_highest_bidder: Boolean

  """You are the leading bidder without regard to reserve"""
  is_leading_bidder: Boolean

  """
  Your most recent bid—which is not necessarily winning (may be higher or lower)
  """
  most_recent_bid: BidderPosition
  sale: Sale
  sale_artwork: SaleArtwork
}

type Me implements Node {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!

  """A list of the current user’s consignment submissions"""
  consignment_submissions(after: String, first: Int, before: String, last: Int, completed: Boolean): ConsignmentSubmissionConnection

  """A list of the current user’s inquiry requests"""
  artwork_inquiries_connection(after: String, first: Int, before: String, last: Int): ArtworkInquiryConnection

  """A list of the current user’s bidder registrations"""
  bidders(
    """The slug or ID of a Sale"""
    sale_id: String
  ): [Bidder]

  """The current user's status relating to bids on artworks"""
  bidder_status(artwork_id: String!, sale_id: String!): LotStanding

  """A list of the current user's bidder positions"""
  bidder_positions(
    """Only the bidder positions on a specific artwork"""
    artwork_id: String

    """Only the most recent bidder positions per artwork."""
    current: Boolean

    """Only the bidder positions for a specific auction"""
    sale_id: String
  ): [BidderPosition]

  """Returns a single bidder position"""
  bidder_position(id: String!): BidderPositionResult

  """A collector profile."""
  collector_profile: CollectorProfileType

  """A conversation, usually between a user and a partner"""
  conversation(
    """The ID of the Conversation"""
    id: String!
  ): Conversation

  """Conversations, usually between a user and partner."""
  conversations(after: String, first: Int, before: String, last: Int): ConversationConnection
  created_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  email: String

  """A list of the current user’s artist follows"""
  follow_artists(page: Int, size: Int): FollowArtists

  """A list of the current user’s inquiry requests"""
  followed_artists_connection(after: String, first: Int, before: String, last: Int): FollowArtistConnection

  """A list of the current user’s inquiry requests"""
  followed_genes(after: String, first: Int, before: String, last: Int): FollowGeneConnection
  followsAndSaves: FollowsAndSaves
  has_credit_cards: Boolean
  has_qualified_credit_cards: Boolean

  """An invoice"""
  invoice(
    """The ID of the Conversation"""
    conversationId: String!

    """The ID of the invoice"""
    invoiceId: String!
  ): Invoice

  """The current user's status relating to bids on artworks"""
  lot_standing(artwork_id: String!, sale_id: String!): LotStanding

  """A list of the current user's auction standings for given lots"""
  lot_standings(
    """Only includes lots on which you have a leading bidder position."""
    active_positions: Boolean

    """Only the lot standings on a specific artwork"""
    artwork_id: String

    """Only the lot standings for currently open or closed auctions."""
    live: Boolean

    """Only the lot standings for a specific auction"""
    sale_id: String
  ): [LotStanding]
  name: String
  initials(length: Int = 3): String

  """
  A list of feed items, indicating published artworks (grouped by date and artists).
  """
  notifications_connection(after: String, first: Int, before: String, last: Int): NotificationsFeedItemConnection @deprecated(reason: "Prefer to use followed_artists_artwork_groups.")
  paddle_number: String
  recentlyViewedArtworkIds: [String]!

  """A list of the current user’s recently viewed artworks."""
  recentlyViewedArtworks(after: String, first: Int, before: String, last: Int): ArtworkConnection
  sale_registrations(
    """Limit by auction."""
    is_auction: Boolean = true

    """
    
            Only return sales matching specified ids.
            Accepts list of ids.
          
    """
    ids: [String]

    """Limit by live status."""
    live: Boolean = true

    """Limit by published status."""
    published: Boolean = true
    size: Int
    sort: SaleSorts
  ): [SaleRegistration]
  saved_artworks: Collection

  """
  A list of the current user’s suggested artists, based on a single artist
  """
  suggested_artists(
    """The slug or ID of an artist"""
    artist_id: String

    """Exclude artists without for sale works"""
    exclude_artists_without_forsale_artworks: Boolean

    """Exclude artists without any artworks"""
    exclude_artists_without_artworks: Boolean

    """Exclude artists the user already follows"""
    exclude_followed_artists: Boolean

    """
    Exclude these ids from results, may result in all artists being excluded.
    """
    exclude_artist_ids: [String]

    """Pagination, need I say more?"""
    page: Int

    """Amount of artists to return"""
    size: Int
  ): [Artist]
  type: String
}

"""A message in a conversation."""
type Message implements Node {
  """A globally unique ID."""
  __id: ID!

  """Impulse message id."""
  id: String!

  """Impulse message id."""
  impulse_id: String!

  """True if message is from the user to the partner."""
  is_from_user: Boolean
  from_email_address: String @deprecated(reason: "Prefer to use the structured `from` field.")
  from: MessageInitiator

  """Full unsanitized text."""
  raw_text: String! @deprecated(reason: "Prefer to use the parsed/cleaned-up `body`.")

  """
  Unaltered text if possible, otherwise `body`: a parsed/sanitized version from Sendgrid.
  """
  body: String
  deliveries: [Delivery]
  attachments: [Attachment]
  invoice: Invoice

  """True if message is an invoice message"""
  is_invoice: Boolean
  created_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
}

"""A connection to a list of items."""
type MessageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MessageEdge]
}

"""An edge in a connection."""
type MessageEdge {
  """The item at the end of the edge"""
  node: Message

  """A cursor for use in pagination"""
  cursor: String!
}

"""The participant who sent the message."""
type MessageInitiator {
  name: String
  email: String
}

type Mutation {
  """Create a bidder"""
  createBidder(input: CreateBidderInput!): CreateBidderPayload

  """Creates a bidder position"""
  createBidderPosition(input: BidderPositionInput!): BidderPositionPayload

  """Create a credit card"""
  createCreditCard(input: CreditCardInput!): CreditCardPayload

  """Follow (or unfollow) an artist"""
  followArtist(input: FollowArtistInput!): FollowArtistPayload

  """Follow (or unfollow) an gene"""
  followGene(input: FollowGeneInput!): FollowGenePayload

  """Updating a collector profile (loyalty applicant status)."""
  updateCollectorProfile(input: UpdateCollectorProfileInput!): UpdateCollectorProfilePayload

  """Update the current logged in user."""
  updateMyUserProfile(input: UpdateMyProfileInput!): UpdateMyProfilePayload

  """Update a conversation."""
  updateConversation(input: UpdateConversationMutationInput!): UpdateConversationMutationPayload

  """Update an order"""
  updateOrder(input: UpdateOrderInput!): UpdateOrderPayload

  """Submit an order with payment"""
  submitOrder(input: SubmitOrderInput!): SubmitOrderPayload

  """Appending a message to a conversation thread"""
  sendConversationMessage(input: SendConversationMessageMutationInput!): SendConversationMessageMutationPayload

  """Save (or remove) an artwork to (from) a users default collection."""
  saveArtwork(input: SaveArtworkInput!): SaveArtworkPayload

  """Mark sale as ended."""
  endSale(input: EndSaleInput!): EndSalePayload

  """Attach an gemini asset to a consignment submission"""
  requestCredentialsForAssetUpload(input: RequestCredentialsForAssetUploadInput!): RequestCredentialsForAssetUploadPayload

  """Attach an gemini asset to a consignment submission"""
  createGeminiEntryForAsset(input: CreateGeminiEntryForAssetInput!): CreateGeminiEntryForAssetPayload

  """Create a new consignment submission using Convection"""
  createConsignmentSubmission(input: CreateSubmissionMutationInput!): CreateSubmissionMutationPayload

  """Update a consigment using Convection"""
  updateConsignmentSubmission(input: UpdateSubmissionMutationInput!): UpdateSubmissionMutationPayload

  """Attach an gemini asset to a consignment submission"""
  addAssetToConsignmentSubmission(input: AddAssetToConsignmentSubmissionInput!): AddAssetToConsignmentSubmissionPayload

  """Records an artwork view."""
  recordArtworkView(input: RecordArtworkViewInput!): RecordArtworkViewPayload
}

input Near {
  lat: Float!
  lng: Float!
  max_distance: Float
}

"""An object with a Globally Unique ID"""
interface Node {
  """The ID of the object."""
  __id: ID!
}

type NotificationsFeedItem implements Node {
  """A globally unique ID."""
  __id: ID!
  artists: String

  """List of artworks in this notification bundle"""
  artworks: [Artwork]
  date(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  message: String
  status: NotificationsFeedItemStatus
  image: Image
}

"""A connection to a list of items."""
type NotificationsFeedItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NotificationsFeedItemEdge]
}

"""An edge in a connection."""
type NotificationsFeedItemEdge {
  """The item at the end of the edge"""
  node: NotificationsFeedItem

  """A cursor for use in pagination"""
  cursor: String!
}

enum NotificationsFeedItemStatus {
  READ
  UNREAD
}

type Order {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!

  """A type-specific Gravity Mongo Document ID."""
  _id: String!

  """List of order line items"""
  line_items: [OrderLineItem]
  item_total: OrderItemTotal

  """Email associated with the order"""
  email: String

  """Phone number associated with the order"""
  telephone: String

  """Shipping address associated with the order"""
  shipping_address: OrderAddress
}

type OrderAddress {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!

  """A type-specific Gravity Mongo Document ID."""
  _id: String!

  """Name associated with the address"""
  name: String

  """Street associated with the address"""
  street: String

  """City associated with the address"""
  city: String

  """Region associated with the address"""
  region: String

  """Postal code associated with the address"""
  postal_code: String

  """Country code associated with the address (standard 3-letter code)"""
  country: String
}

type OrderedSet {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!
  cached: Int
  description: String
  key: String
  item_type: String
  items: [Item]
  name: String
}

type OrderItemTotal {
  """A formatted price with various currency formatting options."""
  amount(
    decimal: String = "."

    """Allows control of symbol position (%v = value, %s = symbol)"""
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  """An amount of money expressed in cents."""
  cents: Float

  """A pre-formatted price."""
  display: String
}

type OrderLineItem {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!

  """A type-specific Gravity Mongo Document ID."""
  _id: String!

  """Quantity of this item"""
  quantity: Int

  """Artwork that is being ordered"""
  artwork: Artwork

  """Edition set on the artwork"""
  edition_set: EditionSet

  """Partner being ordered from"""
  partner: Partner

  """Location of the partner"""
  partner_location: Location

  """Shipping note from the partner"""
  shipping_note: String

  """Sale conditions (set by partner)"""
  sale_conditions_url: String
}

type organizer {
  profile_id: ID
  profile: Profile
}

type PageCursor {
  cursor: String!
  page: Int!
  isCurrent: Boolean!
}

type PageCursors {
  """
  Optional, may be included in `around` (if current page is near the beginning).
  """
  first: PageCursor

  """
  Optional, may be included in `around` (if current page is near the end).
  """
  last: PageCursor

  """Always includes current page"""
  around: [PageCursor!]!
  previous: PageCursor
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Partner implements Node {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!

  """A type-specific Gravity Mongo Document ID."""
  _id: String!
  cached: Int
  artworks(size: Int, for_sale: Boolean, sort: ArtworkSorts, exclude: [String]): [Artwork]
  categories: [Category]
  collecting_institution: String
  contact_message: String @deprecated(reason: "Prefer artwork contact_message to handle availability-based prompts.")
  counts: PartnerCounts
  default_profile_id: String
  has_fair_partnership: Boolean
  href: String
  initials(length: Int = 3): String
  is_default_profile_public: Boolean
  is_limited_fair_partner: Boolean @deprecated(reason: "This field no longer exists, this is for backwards compatibility")
  is_linkable: Boolean
  is_pre_qualify: Boolean
  locations(size: Int = 25): [Location]
  name: String
  profile: Profile
  shows(
    at_a_fair: Boolean
    displayable: Boolean = true
    fair_id: String
    featured: Boolean

    """
    
            Only return shows matching specified ids.
            Accepts list of ids.
          
    """
    ids: [String]
    near: Near
    size: Int
    sort: PartnerShowSorts
    status: EventStatus
  ): [PartnerShow]
  type: String
  acceptsCardPayments: Boolean
}

type PartnerArtist {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!
  artist: Artist
  biography: String
  counts: PartnerArtistCounts
  is_display_on_partner_profile: Boolean
  is_represented_by: Boolean
  is_use_default_biography: Boolean
  partner: Partner
  sortable_id: String
}

"""A connection to a list of items."""
type PartnerArtistConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PartnerArtistEdge]
}

type PartnerArtistCounts {
  artworks(
    """Returns a `String` when format is specified. e.g.`'0,0.0000''`"""
    format: String
    label: String
  ): FormattedNumber
  for_sale_artworks(
    """Returns a `String` when format is specified. e.g.`'0,0.0000''`"""
    format: String
    label: String
  ): FormattedNumber
}

"""An edge in a connection."""
type PartnerArtistEdge {
  """The item at the end of the edge"""
  node: Partner

  """A cursor for use in pagination"""
  cursor: String!

  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!
  artist: Artist
  biography: String
  counts: PartnerArtistCounts
  is_display_on_partner_profile: Boolean
  is_represented_by: Boolean
  is_use_default_biography: Boolean
  partner: Partner
  sortable_id: String
}

type PartnerCategory {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!
  cached: Int
  category_type: CategoryType
  name: String
  partners(
    default_profile_public: Boolean
    eligible_for_carousel: Boolean

    """Indicates an active subscription"""
    eligible_for_listing: Boolean

    """Indicates tier 1/2 for gallery, 1 for institution"""
    eligible_for_primary_bucket: Boolean

    """Indicates tier 3/4 for gallery, 2 for institution"""
    eligible_for_secondary_bucket: Boolean
    ids: [String]
    has_full_profile: Boolean

    """Coordinates to find partners closest to"""
    near: String
    page: Int

    """
    
            Only return partners of the specified partner categories.
            Accepts list of slugs.
          
    """
    partner_categories: [String]
    size: Int
    sort: PartnersSortType

    """term used for searching Partners"""
    term: String
    type: [PartnerClassification]
  ): [Partner]
}

enum PartnerClassification {
  AUCTION
  BRAND
  DEMO
  GALLERY
  INSTITUTION
  INSTITUTIONAL_SELLER
  PRIVATE_COLLECTOR
  PRIVATE_DEALER
}

type PartnerCounts {
  artworks(
    """Returns a `String` when format is specified. e.g.`'0,0.0000''`"""
    format: String
    label: String
  ): FormattedNumber
  artists(
    """Returns a `String` when format is specified. e.g.`'0,0.0000''`"""
    format: String
    label: String
  ): FormattedNumber
  partner_artists(
    """Returns a `String` when format is specified. e.g.`'0,0.0000''`"""
    format: String
    label: String
  ): FormattedNumber
  eligible_artworks(
    """Returns a `String` when format is specified. e.g.`'0,0.0000''`"""
    format: String
    label: String
  ): FormattedNumber
  published_for_sale_artworks(
    """Returns a `String` when format is specified. e.g.`'0,0.0000''`"""
    format: String
    label: String
  ): FormattedNumber
  published_not_for_sale_artworks(
    """Returns a `String` when format is specified. e.g.`'0,0.0000''`"""
    format: String
    label: String
  ): FormattedNumber
  shows(
    """Returns a `String` when format is specified. e.g.`'0,0.0000''`"""
    format: String
    label: String
  ): FormattedNumber
  displayable_shows(
    """Returns a `String` when format is specified. e.g.`'0,0.0000''`"""
    format: String
    label: String
  ): FormattedNumber
  current_displayable_shows(
    """Returns a `String` when format is specified. e.g.`'0,0.0000''`"""
    format: String
    label: String
  ): FormattedNumber
  artist_documents(
    """Returns a `String` when format is specified. e.g.`'0,0.0000''`"""
    format: String
    label: String
  ): FormattedNumber
  partner_show_documents(
    """Returns a `String` when format is specified. e.g.`'0,0.0000''`"""
    format: String
    label: String
  ): FormattedNumber
}

enum PartnersAggregation {
  CATEGORY
  LOCATION
  TOTAL
}

"""The results for one of the requested aggregations"""
type PartnersAggregationResults {
  counts: [AggregationCount]
  slice: PartnersAggregation
}

type PartnerShow implements Node {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!

  """A type-specific Gravity Mongo Document ID."""
  _id: String!
  cached: Int
  artists: [Artist]
  artworks(
    all: Boolean

    """
    List of artwork IDs to exclude from the response (irrespective of size)
    """
    exclude: [String]
    for_sale: Boolean
    published: Boolean = true
    page: Int = 1

    """Number of artworks to return"""
    size: Int = 25
  ): [Artwork]
  counts: PartnerShowCounts
  cover_image: Image
  created_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  description: String
  displayable: Boolean @deprecated(reason: "Prefix Boolean returning fields with `is_`")
  end_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  events: [PartnerShowEventType]

  """A formatted description of the start to end dates"""
  exhibition_period: String
  fair: Fair
  href: String
  images(
    """Number of images to return"""
    size: Int

    """Pass true/false to include cover or not"""
    default: Boolean
    page: Int
  ): [Image]

  """Flag showing if show has any location."""
  has_location: Boolean

  """
  Gravity doesn’t expose the `active` flag. Temporarily re-state its logic.
  """
  is_active: Boolean
  is_displayable: Boolean
  is_fair_booth: Boolean
  kind: String
  location: Location
  meta_image: Image

  """The exhibition title"""
  name: String
  partner: Partner
  press_release(format: Format): String
  start_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  status: String

  """A formatted update on upcoming status changes"""
  status_update(
    """Before this many days no update will be generated"""
    max_days: Int
  ): String
  type: String
}

type PartnerShowCounts {
  artworks(
    """The slug or ID of an artist in the show."""
    artist_id: String
  ): Int
  eligible_artworks(
    """Returns a `String` when format is specified. e.g.`'0,0.0000''`"""
    format: String
    label: String
  ): FormattedNumber
}

type PartnerShowEventType {
  event_type: String
  description: String
  title: String
  start_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  end_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
}

enum PartnerShowSorts {
  created_at_asc @deprecated(reason: "use capital enums")
  created_at_desc @deprecated(reason: "use capital enums")
  end_at_asc @deprecated(reason: "use capital enums")
  end_at_desc @deprecated(reason: "use capital enums")
  name_asc @deprecated(reason: "use capital enums")
  name_desc @deprecated(reason: "use capital enums")
  publish_at_asc @deprecated(reason: "use capital enums")
  publish_at_desc @deprecated(reason: "use capital enums")
  start_at_asc @deprecated(reason: "use capital enums")
  start_at_desc @deprecated(reason: "use capital enums")
  CREATED_AT_ASC
  CREATED_AT_DESC
  END_AT_ASC
  END_AT_DESC
  NAME_ASC
  NAME_DESC
  PUBLISH_AT_ASC
  PUBLISH_AT_DESC
  START_AT_ASC
  START_AT_DESC
}

enum PartnersSortType {
  CREATED_AT_ASC
  CREATED_AT_DESC
  SORTABLE_ID_ASC
  SORTABLE_ID_DESC
  RELATIVE_SIZE_ASC
  RELATIVE_SIZE_DESC
  PUBLISHED_AT_DESC
  RANDOM_SCORE_DESC
}

union PartnerTypes = Partner | ExternalPartner

type PopularArtists {
  artists: [Artist]
}

type Profile {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!

  """A type-specific Gravity Mongo Document ID."""
  _id: String!
  cached: Int
  bio: String
  counts: ProfileCounts
  href: String
  icon: Image
  image: Image
  initials(length: Int = 3): String
  is_followed: Boolean
  is_published: Boolean
  name: String
  is_publically_visible: Boolean
}

type ProfileCounts {
  follows(
    """Returns a `String` when format is specified. e.g.`'0,0.0000''`"""
    format: String
    label: String
  ): FormattedNumber
}

type Query {
  """An Article"""
  article(
    """The ID of the Article"""
    id: String!
  ): Article

  """A list of Articles"""
  articles(auction_id: String, published: Boolean = true, show_id: String, sort: ArticleSorts): [Article]

  """An Artwork"""
  artwork(
    """The slug or ID of the Artwork"""
    id: String!
  ): Artwork

  """A list of Artworks"""
  artworks(ids: [String]): [Artwork]

  """An Artist"""
  artist(
    """The slug or ID of the Artist"""
    id: String!
  ): Artist

  """A list of Artists"""
  artists(
    """
    
            Only return artists matching specified ids.
            Accepts list of ids.
          
    """
    ids: [String]

    """
    
            Only return artists matching specified slugs.
            Accepts list of slugs. (e.g. 'andy-warhol', 'banksy')
          
    """
    slugs: [String]
    page: Int = 1
    size: Int
    sort: ArtistSorts
  ): [Artist]

  """Creates, and authorizes, a JWT custom for Causality"""
  causality_jwt(
    role: Role

    """The id of the auction to participate in"""
    sale_id: String!
  ): String
  collection(
    """The slug or ID of the Collection"""
    id: String!
  ): Collection

  """An External Partner not on the platform"""
  external_partner(
    """The ID of the Partner"""
    id: String!
  ): ExternalPartner

  """A Fair"""
  fair(
    """The slug or ID of the Fair"""
    id: String!
  ): Fair

  """A list of Fairs"""
  fairs(
    fair_organizer_id: String
    has_full_feature: Boolean
    has_homepage_section: Boolean
    has_listing: Boolean

    """
    
            Only return fairs matching specified ids.
            Accepts list of ids.
          
    """
    ids: [String]
    near: Near
    page: Int
    size: Int
    sort: FairSorts
    status: EventStatus
  ): [Fair]

  """Partners Elastic Search results"""
  filter_partners(
    default_profile_public: Boolean
    eligible_for_carousel: Boolean

    """Indicates an active subscription"""
    eligible_for_listing: Boolean

    """Indicates tier 1/2 for gallery, 1 for institution"""
    eligible_for_primary_bucket: Boolean

    """Indicates tier 3/4 for gallery, 2 for institution"""
    eligible_for_secondary_bucket: Boolean
    ids: [String]
    has_full_profile: Boolean

    """Coordinates to find partners closest to"""
    near: String
    page: Int

    """
    
            Only return partners of the specified partner categories.
            Accepts list of slugs.
          
    """
    partner_categories: [String]
    size: Int
    sort: PartnersSortType

    """term used for searching Partners"""
    term: String
    type: [PartnerClassification]
    aggregations: [PartnersAggregation]!
  ): FilterPartners

  """Artworks Elastic Search results"""
  filter_artworks(
    aggregation_partner_cities: [String]
    aggregations: [ArtworkAggregation]
    artist_id: String
    artist_ids: [String]
    color: String
    dimension_range: String
    extra_aggregation_gene_ids: [String]
    include_artworks_by_followed_artists: Boolean
    include_medium_filter_in_aggregation: Boolean
    for_sale: Boolean
    gene_id: String
    gene_ids: [String]
    height: String
    width: String

    """A string from the list of allocations, or * to denote all mediums"""
    medium: String
    period: String
    periods: [String]
    major_periods: [String]
    partner_id: ID
    partner_cities: [String]
    price_range: String
    page: Int
    sale_id: ID
    size: Int
    sort: String
    tag_id: String
    keyword: String
  ): FilterArtworks

  """Sale Artworks Elastic Search results"""
  filter_sale_artworks(aggregations: [SaleArtworkAggregation], artist_ids: [String], include_artworks_by_followed_artists: Boolean, live_sale: Boolean, is_auction: Boolean, gene_ids: [String], estimate_range: String, page: Int, sale_id: ID, size: Int, sort: String): FilterSaleArtworks @deprecated(reason: "This type has been superceded by `sale_artworks`")
  gene(
    """The slug or ID of the Gene"""
    id: String!
  ): Gene

  """A list of Genes"""
  genes(
    size: Int

    """
    
            Only return genes matching specified slugs.
            Accepts list of slugs.
          
    """
    slugs: [String]
  ): [Gene]

  """List of curated genes with custom images"""
  suggested_genes: [Gene]

  """A list of Gene Families"""
  gene_families(after: String, first: Int, before: String, last: Int): GeneFamilyConnection
  gene_family: GeneFamily

  """Home screen content"""
  home_page: HomePage

  """A Search for Artists"""
  match_artist(
    """Your search term"""
    term: String!

    """Maximum number of items to retrieve. Default: 5."""
    size: Int

    """Page to retrieve. Default: 1."""
    page: Int

    """Exclude these MongoDB ids from results"""
    exclude_ids: [String]
  ): [Artist]

  """A Search for Genes"""
  match_gene(
    """Your search term"""
    term: String!

    """Maximum number of items to retrieve. Default: 5."""
    size: Int

    """Page to retrieve. Default: 1."""
    page: Int

    """Exclude these MongoDB ids from results"""
    exclude_ids: [String]
  ): [Gene]
  me: Me

  """Fetches an object given its Globally Unique ID"""
  node(
    """The ID of the object"""
    __id: ID!
  ): Node

  """Returns a single Order"""
  order(id: String!): Order

  """An OrderedSet"""
  ordered_set(
    """The ID of the OrderedSet"""
    id: String!
  ): OrderedSet

  """A collection of OrderedSets"""
  ordered_sets(
    """Key to the OrderedSet or group of OrderedSets"""
    key: String!
    public: Boolean = true
    page: Int = 1
    size: Int = 10
  ): [OrderedSet]

  """A Partner"""
  partner(
    """The slug or ID of the Partner"""
    id: String!
  ): Partner

  """A list of PartnerCategories"""
  partner_categories(
    category_type: CategoryType

    """Filter by whether category is internal"""
    internal: Boolean = false
    size: Int
  ): [PartnerCategory]

  """A PartnerCategory"""
  partner_category(
    """The slug or ID of the PartnerCategory"""
    id: String!
  ): PartnerCategory

  """A Partner Show"""
  partner_show(
    """The slug or ID of the PartnerShow"""
    id: String!
  ): PartnerShow

  """A list of PartnerShows"""
  partner_shows(
    at_a_fair: Boolean
    displayable: Boolean = true
    fair_id: String
    featured: Boolean

    """
    
            Only return shows matching specified ids.
            Accepts list of ids.
          
    """
    ids: [String]
    near: Near
    partner_id: String
    size: Int
    sort: PartnerShowSorts
    status: EventStatus
  ): [PartnerShow]

  """A list of Partners"""
  partners(
    default_profile_public: Boolean
    eligible_for_carousel: Boolean

    """Indicates an active subscription"""
    eligible_for_listing: Boolean

    """Indicates tier 1/2 for gallery, 1 for institution"""
    eligible_for_primary_bucket: Boolean

    """Indicates tier 3/4 for gallery, 2 for institution"""
    eligible_for_secondary_bucket: Boolean
    ids: [String]
    has_full_profile: Boolean

    """Coordinates to find partners closest to"""
    near: String
    page: Int

    """
    
            Only return partners of the specified partner categories.
            Accepts list of slugs.
          
    """
    partner_categories: [String]
    size: Int
    sort: PartnersSortType

    """term used for searching Partners"""
    term: String
    type: [PartnerClassification]
  ): [Partner]

  """A Profile"""
  profile(
    """The slug or ID of the Profile"""
    id: String!
  ): Profile

  """A Sale"""
  sale(
    """The slug or ID of the Sale"""
    id: String!
  ): Sale

  """A Sale Artwork"""
  sale_artwork(
    """The slug or ID of the SaleArtwork"""
    id: String!
  ): SaleArtwork

  """Sale Artworks search results"""
  sale_artworks(aggregations: [SaleArtworkAggregation], artist_ids: [String], include_artworks_by_followed_artists: Boolean, live_sale: Boolean, is_auction: Boolean, gene_ids: [String], estimate_range: String, page: Int, sale_id: ID, size: Int, sort: String, after: String, first: Int, before: String, last: Int): SaleArtworksConnection

  """A list of Sales"""
  sales(
    """Limit by auction."""
    is_auction: Boolean = true

    """
    
            Only return sales matching specified ids.
            Accepts list of ids.
          
    """
    ids: [String]

    """Limit by live status."""
    live: Boolean = true

    """Limit by published status."""
    published: Boolean = true
    size: Int
    sort: SaleSorts
  ): [Sale]

  """The schema for difference microservice settings"""
  services: Services

  """A Show"""
  show(
    """The slug or ID of the Show"""
    id: String!
  ): Show
  status: Status
  tag(
    """The slug or ID of the Tag"""
    id: String!
  ): Tag

  """Trending artists"""
  trending_artists(
    """
    Fetch the top artists for each metric within double the base time period
    """
    double_time_period: Boolean = false

    """Trending method"""
    method: String = "fetch"

    """Trending metric name"""
    name: TrendingMetrics!

    """Number of results to return"""
    size: Int = 40
  ): TrendingArtists
  user(
    """Email to search for user by"""
    email: String
  ): User

  """A list of Users"""
  users(ids: [String]): [User]

  """Popular artists"""
  popular_artists(
    """If true, will exclude followed artists for the user"""
    exclude_followed_artists: Boolean

    """
    Exclude these ids from results, may result in all artists being excluded.
    """
    exclude_artist_ids: [String]

    """Number of results to return"""
    size: Int
  ): PopularArtists

  """A wildcard used to support complex root queries in Relay"""
  viewer: Viewer
}

input RecordArtworkViewInput {
  artwork_id: String!
  clientMutationId: String
}

type RecordArtworkViewPayload {
  artwork_id: String!
  clientMutationId: String
}

enum RelatedArtistsKind {
  MAIN
  CONTEMPORARY
}

input RequestCredentialsForAssetUploadInput {
  """The gemini template you want to request"""
  name: String!

  """The desired access control"""
  acl: String!
  clientMutationId: String
}

type RequestCredentialsForAssetUploadPayload {
  asset: Credentials
  clientMutationId: String
}

type ResizedImageUrl {
  factor: Float
  width: Int
  height: Int
  url: String
}

enum Role {
  PARTICIPANT
  OPERATOR
}

"""The conditions for uploading assets to media.artsy.net"""
type S3PolicyConditionsType {
  """The bucket to upload to."""
  bucket: String!

  """The assigned access control"""
  acl: String!

  """A key which is prefixed on your file"""
  gemini_key: String!

  """The returned status code, currently always 201"""
  success_action_status: String!
}

"""An policy for uploading assets to media.artsy.net"""
type S3PolicyDocumentType {
  """An expiration date string."""
  expiration: String!

  """The details for the upload"""
  conditions: S3PolicyConditionsType!
}

type Sale implements Node {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!

  """A type-specific Gravity Mongo Document ID."""
  _id: String!
  cached: Int
  artworks(
    page: Int = 1
    size: Int = 25
    all: Boolean = false

    """
    List of artwork IDs to exclude from the response (irrespective of size)
    """
    exclude: [String]
  ): [Artwork]
  associated_sale: Sale
  auction_state: String @deprecated(reason: "Favor `status` for consistency with other models")

  """A bid increment policy that explains minimum bids in ranges."""
  bid_increments: [BidIncrement]

  """Auction's buyer's premium policy."""
  buyers_premium: [BuyersPremium]
  cover_image: Image
  currency: String
  description: String
  display_timely_at: String
  eligible_sale_artworks_count: Int
  end_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  event_start_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  event_end_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  href: String
  name: String
  is_auction: Boolean
  is_auction_promo: Boolean
  is_closed: Boolean
  is_open: Boolean
  is_live_open: Boolean
  is_preview: Boolean
  is_registration_closed: Boolean
  is_with_buyers_premium: Boolean
  live_start_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String

  """
  Returns a live auctions url if the sale is open and start time is after now
  """
  live_url_if_open: String
  partner: Partner
  profile: Profile
  promoted_sale: Sale
  registration_ends_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  require_bidder_approval: Boolean
  sale_artworks(page: Int = 1, size: Int = 25, all: Boolean = false): [SaleArtwork]
  sale_artworks_connection(after: String, first: Int, before: String, last: Int): SaleArtworkConnection
  sale_type: String
  start_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  status: String
  sale_artwork(id: String!): SaleArtwork
  symbol: String
}

type SaleArtwork {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!

  """A type-specific Gravity Mongo Document ID."""
  _id: String!
  cached: Int
  artwork: Artwork
  bidder_positions_count: Int @deprecated(reason: "Favor `counts.bidder_positions`")
  bid_increments: [Float] @deprecated(reason: "Favor `increments.cents`")
  counts: SaleArtworkCounts

  """Currency abbreviation (e.g. "USD")"""
  currency: String
  current_bid: SaleArtworkCurrentBid
  estimate: String

  """Singular estimate field, if specified"""
  estimate_cents: Int
  high_estimate: SaleArtworkHighEstimate
  high_estimate_cents: Float @deprecated(reason: "Favor `high_estimate")
  highest_bid: SaleArtworkHighestBid
  increments: [BidIncrementsFormatted]
  is_bid_on: Boolean

  """Can bids be placed on the artwork?"""
  is_biddable: Boolean
  is_with_reserve: Boolean
  lot_label: String
  lot_number: String @deprecated(reason: "Favor `lot_label`")
  low_estimate: SaleArtworkLowEstimate
  low_estimate_cents: Float @deprecated(reason: "Favor `low_estimate`")
  minimum_next_bid: SaleArtworkMinimumNextBid
  minimum_next_bid_cents: Float @deprecated(reason: "Favor `minimum_next_bid`")
  opening_bid: SaleArtworkOpeningBid
  opening_bid_cents: Float @deprecated(reason: "Favor `opening_bid`")
  position: Int
  reserve: SaleArtworkReserve
  reserve_message: String
  reserve_status: String
  sale_id: String
  sale: Sale

  """Currency symbol (e.g. "$")"""
  symbol: String
}

enum SaleArtworkAggregation {
  ARTIST
  FOLLOWED_ARTISTS
  MEDIUM
  TOTAL
}

"""A connection to a list of items."""
type SaleArtworkConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SaleArtworkEdge]
}

type SaleArtworkCounts {
  bidder_positions(
    """Returns a `String` when format is specified. e.g.`'0,0.0000''`"""
    format: String
    label: String
  ): FormattedNumber
}

type SaleArtworkCurrentBid {
  """A formatted price with various currency formatting options."""
  amount(
    decimal: String = "."

    """Allows control of symbol position (%v = value, %s = symbol)"""
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  """An amount of money expressed in cents."""
  cents: Float

  """A pre-formatted price."""
  display: String
}

"""An edge in a connection."""
type SaleArtworkEdge {
  """The item at the end of the edge"""
  node: SaleArtwork

  """A cursor for use in pagination"""
  cursor: String!
}

type SaleArtworkHighestBid {
  id: ID
  created_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  is_cancelled: Boolean

  """A formatted price with various currency formatting options."""
  amount(
    decimal: String = "."

    """Allows control of symbol position (%v = value, %s = symbol)"""
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String
  cents: Int
  display: String
  amount_cents: Float @deprecated(reason: "Favor `cents`")
}

type SaleArtworkHighEstimate {
  """A formatted price with various currency formatting options."""
  amount(
    decimal: String = "."

    """Allows control of symbol position (%v = value, %s = symbol)"""
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  """An amount of money expressed in cents."""
  cents: Float

  """A pre-formatted price."""
  display: String
}

type SaleArtworkLowEstimate {
  """A formatted price with various currency formatting options."""
  amount(
    decimal: String = "."

    """Allows control of symbol position (%v = value, %s = symbol)"""
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  """An amount of money expressed in cents."""
  cents: Float

  """A pre-formatted price."""
  display: String
}

type SaleArtworkMinimumNextBid {
  """A formatted price with various currency formatting options."""
  amount(
    decimal: String = "."

    """Allows control of symbol position (%v = value, %s = symbol)"""
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  """An amount of money expressed in cents."""
  cents: Float

  """A pre-formatted price."""
  display: String
}

type SaleArtworkOpeningBid {
  """A formatted price with various currency formatting options."""
  amount(
    decimal: String = "."

    """Allows control of symbol position (%v = value, %s = symbol)"""
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  """An amount of money expressed in cents."""
  cents: Float

  """A pre-formatted price."""
  display: String
}

type SaleArtworkReserve {
  """A formatted price with various currency formatting options."""
  amount(
    decimal: String = "."

    """Allows control of symbol position (%v = value, %s = symbol)"""
    format: String = "%s%v"
    precision: Int = 0
    symbol: String
    thousand: String = ","
  ): String

  """An amount of money expressed in cents."""
  cents: Float

  """A pre-formatted price."""
  display: String
}

"""The results for one of the requested aggregations"""
type SaleArtworksAggregationResults {
  counts: [AggregationCount]
  slice: SaleArtworkAggregation
}

"""A connection to a list of items."""
type SaleArtworksConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SaleArtworksEdge]

  """Returns aggregation counts for the given filter query."""
  aggregations: [SaleArtworksAggregationResults]
  counts: FilterSaleArtworksCounts
}

"""An edge in a connection."""
type SaleArtworksEdge {
  """The item at the end of the edge"""
  node: SaleArtwork

  """A cursor for use in pagination"""
  cursor: String!
}

type SaleRegistration {
  bidder: Bidder
  is_registered: Boolean
  sale: Sale
}

enum SaleSorts {
  _ID_ASC
  _ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ELIGIBLE_SALE_ARTWORKS_COUNT_ASC
  ELIGIBLE_SALE_ARTWORKS_COUNT_DESC
  END_AT_ASC
  END_AT_DESC
  NAME_ASC
  NAME_DESC
  START_AT_ASC
  START_AT_DESC
  TIMELY_AT_NAME_ASC
  TIMELY_AT_NAME_DESC
}

input SaveArtworkInput {
  artwork_id: String
  remove: Boolean
  clientMutationId: String
}

type SaveArtworkPayload {
  artwork: Artwork
  clientMutationId: String
}

input SendConversationMessageMutationInput {
  """The id of the conversation to be updated"""
  id: String!

  """The email address of the message sender"""
  from: String!
  body_text: String!

  """The message being replied to"""
  reply_to_message_id: String!
  clientMutationId: String
}

type SendConversationMessageMutationPayload {
  conversation: Conversation
  messageEdge: MessageEdge
  clientMutationId: String
}

type Services {
  convection: Convection!
}

input ShippingAddressInput {
  name: String
  street: String
  city: String
  region: String
  postal_code: String
  country: String
  use_id: String
}

type Show implements Node {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!

  """A type-specific Gravity Mongo Document ID."""
  _id: String!
  cached: Int
  artists: [Artist]
  artworks(
    """Number of artworks to return"""
    size: Int = 25
    published: Boolean = true
    page: Int = 1
    all: Boolean
    for_sale: Boolean

    """
    List of artwork IDs to exclude from the response (irrespective of size)
    """
    exclude: [String]
  ): [Artwork]
  artworks_connection(
    """Number of artworks to return"""
    size: Int = 25
    published: Boolean = true
    page: Int = 1
    all: Boolean
    for_sale: Boolean

    """
    List of artwork IDs to exclude from the response (irrespective of size)
    """
    exclude: [String]
    after: String
    first: Int
    before: String
    last: Int
  ): ArtworkConnection
  artists_without_artworks: [Artist]
  city: String
  cover_image: Image
  counts: ShowCounts
  description: String
  displayable: Boolean @deprecated(reason: "Prefix Boolean returning fields with `is_`")
  end_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  events: [PartnerShowEventType]

  """A formatted description of the start to end dates"""
  exhibition_period: String
  fair: Fair
  href: String
  images(
    """Number of images to return"""
    size: Int

    """Pass true/false to include cover or not"""
    default: Boolean
    page: Int
  ): [Image]

  """Flag showing if show has any location."""
  has_location: Boolean

  """
  Gravity doesn’t expose the `active` flag. Temporarily re-state its logic.
  """
  is_active: Boolean
  is_displayable: Boolean
  is_fair_booth: Boolean
  is_reference: Boolean
  kind: String
  location: Location
  meta_image: Image

  """The exhibition title"""
  name: String
  partner: PartnerTypes
  press_release(format: Format): String
  start_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  status: String

  """A formatted update on upcoming status changes"""
  status_update(
    """Before this many days no update will be generated"""
    max_days: Int
  ): String
  type: String
}

"""A connection to a list of items."""
type ShowConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ShowEdge]
  pageCursors: PageCursors
  totalCount: Int
}

type ShowCounts {
  artworks(
    """The slug or ID of an artist in the show."""
    artist_id: String
  ): Int
  eligible_artworks(
    """Returns a `String` when format is specified. e.g.`'0,0.0000''`"""
    format: String
    label: String
  ): FormattedNumber
}

"""An edge in a connection."""
type ShowEdge {
  """The item at the end of the edge"""
  node: Show

  """A cursor for use in pagination"""
  cursor: String!
}

enum ShowSort {
  START_AT_ASC
  START_AT_DESC
  END_AT_ASC
  END_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  NAME_ASC
  NAME_DESC
  FEATURED_ASC
  FEATURED_DESC
  SORTABLE_NAME_ASC
  SORTABLE_NAME_DESC
}

enum sort {
  DESC
  ASC
}

type Status {
  gravity: StatusGravity

  """Metaphysics ping"""
  ping: Boolean
}

"""Gravity ping"""
type StatusGravity {
  ping: Boolean
}

enum SubmissionCategoryAggregation {
  PAINTING
  SCULPTURE
  PHOTOGRAPHY
  PRINT
  DRAWING_COLLAGE_OR_OTHER_WORK_ON_PAPER
  MIXED_MEDIA
  PERFORMANCE_ART
  INSTALLATION
  VIDEO_FILM_ANIMATION
  ARCHITECTURE
  FASHION_DESIGN_AND_WEARABLE_ART
  JEWELRY
  DESIGN_DECORATIVE_ART
  TEXTILE_ARTS
  OTHER
}

enum SubmissionDimensionAggregation {
  CM
  IN
}

enum SubmissionStateAggregation {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
}

input SubmitOrderInput {
  """Order to be updated"""
  id: String!

  """Third party tokenization of card"""
  credit_card_token: String

  """ID of chosen form of payment"""
  credit_card_id: String

  """Session ID necessary if there is no user present"""
  session_id: String
  clientMutationId: String
}

type SubmitOrderPayload {
  order: Order
  clientMutationId: String
}

type Tag implements Node {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!

  """A type-specific Gravity Mongo Document ID."""
  _id: String!
  cached: Int
  description: String
  name: String
  href: String
  image: Image
  count: Int

  """Artworks Elastic Search results"""
  filtered_artworks(
    aggregation_partner_cities: [String]
    aggregations: [ArtworkAggregation]
    artist_id: String
    artist_ids: [String]
    color: String
    dimension_range: String
    extra_aggregation_gene_ids: [String]
    include_artworks_by_followed_artists: Boolean
    include_medium_filter_in_aggregation: Boolean
    for_sale: Boolean
    gene_id: String
    gene_ids: [String]
    height: String
    width: String

    """A string from the list of allocations, or * to denote all mediums"""
    medium: String
    period: String
    periods: [String]
    major_periods: [String]
    partner_id: ID
    partner_cities: [String]
    price_range: String
    page: Int
    sale_id: ID
    size: Int
    sort: String
    tag_id: String
    keyword: String
  ): FilterArtworks
}

type TrendingArtists {
  artists: [Artist]
}

enum TrendingMetrics {
  """Cumulative price achieved at auction. Base time period: 12 weeks"""
  ARTIST_AUCTION_LOT

  """Number of artworks in fairs. Base time period: 12 weeks."""
  ARTIST_FAIR

  """Base time period: 2 weeks"""
  ARTIST_FOLLOW

  """Base time period: 1 month"""
  ARTIST_INQUIRY

  """Base time period: 1 month"""
  ARTIST_SAVE

  """Base time period: 2 weeks"""
  ARTIST_SEARCH
}

input UpdateCollectorProfileInput {
  loyalty_applicant: Boolean
  professional_buyer: Boolean
  self_reported_purchases: String
  intents: [Intents]
  clientMutationId: String
}

type UpdateCollectorProfilePayload {
  """A globally unique ID."""
  __id: ID!

  """A type-specific ID."""
  id: String!
  email: String
  name: String
  confirmed_buyer_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  collector_level: Int
  self_reported_purchases: String
  loyalty_applicant_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  professional_buyer_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  professional_buyer_applied_at(
    convert_to_utc: Boolean
    format: String

    """
    Specify a tz database time zone, otherwise falls back to `X-TIMEZONE` header
    """
    timezone: String
  ): String
  intents: [String]
  clientMutationId: String
}

input UpdateConversationMutationInput {
  """The id of the conversation to be updated."""
  conversationId: String!

  """The message id to mark as read."""
  fromLastViewedMessageId: String!
  clientMutationId: String
}

type UpdateConversationMutationPayload {
  conversation: Conversation
  clientMutationId: String
}

input UpdateMyProfileInput {
  """The given name of the user."""
  name: String

  """The given email of the user."""
  email: String

  """The given phone number of the user."""
  phone: String

  """The given location of the user as structured data"""
  location: EditableLocation

  """The collector level for the user"""
  collector_level: Int

  """The minimum price collector has selected"""
  price_range_min: Int

  """The maximum price collector has selected"""
  price_range_max: Float
  clientMutationId: String
}

type UpdateMyProfilePayload {
  user: User
  clientMutationId: String
}

input UpdateOrderInput {
  """Order to be updated"""
  id: String!

  """Email address, required of an unauthenticated user"""
  email: String

  """Additional notes"""
  notes: String

  """Whether or not to put the order on reserve"""
  reserve: Boolean

  """Session ID necessary if there is no user present"""
  session_id: String
  shipping_address: ShippingAddressInput

  """Buyer's telephone"""
  telephone: String
  clientMutationId: String
}

type UpdateOrderPayload {
  order: Order
  clientMutationId: String
}

input UpdateSubmissionMutationInput {
  """A type-specific ID."""
  id: String!

  """The gravity ID for an Artist"""
  artist_id: String!

  """Does the artwork come with an certificate of authenticity?"""
  authenticity_certificate: Boolean

  """The set in which to put the work"""
  category: SubmissionCategoryAggregation

  """The depth of the work"""
  depth: String

  """A string, either CM or IN"""
  dimensions_metric: SubmissionDimensionAggregation

  """Is the work a part of an edition"""
  edition: Boolean

  """The number of the individual work if in a set"""
  edition_number: String

  """The whole size of the set of works"""
  edition_size: Int

  """The height of the work"""
  height: String

  """The city where the work currently resides"""
  location_city: String

  """The country where the work currently resides"""
  location_country: String

  """The state where the work currently resides"""
  location_state: String

  """The materials in which the work is created"""
  medium: String

  """The history of an work"""
  provenance: String

  """Is this work signed?"""
  signature: Boolean

  """The name of the work"""
  title: String

  """The internal state of the work, e.g. draft/submitted"""
  state: SubmissionStateAggregation

  """The width of the work"""
  width: String

  """The year the work was created"""
  year: String

  """The user who submitted the work"""
  user_id: ID
  clientMutationId: String
}

type UpdateSubmissionMutationPayload {
  consignment_submission: ConsignmentSubmission
  clientMutationId: String
}

type User {
  """A globally unique ID."""
  __id: ID!

  """User id."""
  id: String!

  """A type-specific Gravity Mongo Document ID."""
  _id: String!
  cached: Int

  """The given name of the user."""
  name: String!

  """The given email of the user."""
  email: String!

  """The given phone number of the user."""
  phone: String

  """The given location of the user as structured data"""
  location: Location

  """The price range the collector has selected"""
  price_range: String

  """
  Check whether a user exists by email address before creating an account.
  """
  userAlreadyExists: Boolean
}

"""A wildcard used to support complex root queries in Relay"""
type Viewer {
  """An Article"""
  article(
    """The ID of the Article"""
    id: String!
  ): Article

  """A list of Articles"""
  articles(auction_id: String, published: Boolean = true, show_id: String, sort: ArticleSorts): [Article]

  """An Artwork"""
  artwork(
    """The slug or ID of the Artwork"""
    id: String!
  ): Artwork

  """A list of Artworks"""
  artworks(ids: [String]): [Artwork]

  """An Artist"""
  artist(
    """The slug or ID of the Artist"""
    id: String!
  ): Artist

  """A list of Artists"""
  artists(
    """
    
            Only return artists matching specified ids.
            Accepts list of ids.
          
    """
    ids: [String]

    """
    
            Only return artists matching specified slugs.
            Accepts list of slugs. (e.g. 'andy-warhol', 'banksy')
          
    """
    slugs: [String]
    page: Int = 1
    size: Int
    sort: ArtistSorts
  ): [Artist]

  """Creates, and authorizes, a JWT custom for Causality"""
  causality_jwt(
    role: Role

    """The id of the auction to participate in"""
    sale_id: String!
  ): String
  collection(
    """The slug or ID of the Collection"""
    id: String!
  ): Collection

  """An External Partner not on the platform"""
  external_partner(
    """The ID of the Partner"""
    id: String!
  ): ExternalPartner

  """A Fair"""
  fair(
    """The slug or ID of the Fair"""
    id: String!
  ): Fair

  """A list of Fairs"""
  fairs(
    fair_organizer_id: String
    has_full_feature: Boolean
    has_homepage_section: Boolean
    has_listing: Boolean

    """
    
            Only return fairs matching specified ids.
            Accepts list of ids.
          
    """
    ids: [String]
    near: Near
    page: Int
    size: Int
    sort: FairSorts
    status: EventStatus
  ): [Fair]

  """Partners Elastic Search results"""
  filter_partners(
    default_profile_public: Boolean
    eligible_for_carousel: Boolean

    """Indicates an active subscription"""
    eligible_for_listing: Boolean

    """Indicates tier 1/2 for gallery, 1 for institution"""
    eligible_for_primary_bucket: Boolean

    """Indicates tier 3/4 for gallery, 2 for institution"""
    eligible_for_secondary_bucket: Boolean
    ids: [String]
    has_full_profile: Boolean

    """Coordinates to find partners closest to"""
    near: String
    page: Int

    """
    
            Only return partners of the specified partner categories.
            Accepts list of slugs.
          
    """
    partner_categories: [String]
    size: Int
    sort: PartnersSortType

    """term used for searching Partners"""
    term: String
    type: [PartnerClassification]
    aggregations: [PartnersAggregation]!
  ): FilterPartners

  """Artworks Elastic Search results"""
  filter_artworks(
    aggregation_partner_cities: [String]
    aggregations: [ArtworkAggregation]
    artist_id: String
    artist_ids: [String]
    color: String
    dimension_range: String
    extra_aggregation_gene_ids: [String]
    include_artworks_by_followed_artists: Boolean
    include_medium_filter_in_aggregation: Boolean
    for_sale: Boolean
    gene_id: String
    gene_ids: [String]
    height: String
    width: String

    """A string from the list of allocations, or * to denote all mediums"""
    medium: String
    period: String
    periods: [String]
    major_periods: [String]
    partner_id: ID
    partner_cities: [String]
    price_range: String
    page: Int
    sale_id: ID
    size: Int
    sort: String
    tag_id: String
    keyword: String
  ): FilterArtworks

  """Sale Artworks Elastic Search results"""
  filter_sale_artworks(aggregations: [SaleArtworkAggregation], artist_ids: [String], include_artworks_by_followed_artists: Boolean, live_sale: Boolean, is_auction: Boolean, gene_ids: [String], estimate_range: String, page: Int, sale_id: ID, size: Int, sort: String): FilterSaleArtworks @deprecated(reason: "This type has been superceded by `sale_artworks`")
  gene(
    """The slug or ID of the Gene"""
    id: String!
  ): Gene

  """A list of Genes"""
  genes(
    size: Int

    """
    
            Only return genes matching specified slugs.
            Accepts list of slugs.
          
    """
    slugs: [String]
  ): [Gene]

  """List of curated genes with custom images"""
  suggested_genes: [Gene]

  """A list of Gene Families"""
  gene_families(after: String, first: Int, before: String, last: Int): GeneFamilyConnection
  gene_family: GeneFamily

  """Home screen content"""
  home_page: HomePage

  """A Search for Artists"""
  match_artist(
    """Your search term"""
    term: String!

    """Maximum number of items to retrieve. Default: 5."""
    size: Int

    """Page to retrieve. Default: 1."""
    page: Int

    """Exclude these MongoDB ids from results"""
    exclude_ids: [String]
  ): [Artist]

  """A Search for Genes"""
  match_gene(
    """Your search term"""
    term: String!

    """Maximum number of items to retrieve. Default: 5."""
    size: Int

    """Page to retrieve. Default: 1."""
    page: Int

    """Exclude these MongoDB ids from results"""
    exclude_ids: [String]
  ): [Gene]
  me: Me

  """Fetches an object given its Globally Unique ID"""
  node(
    """The ID of the object"""
    __id: ID!
  ): Node

  """Returns a single Order"""
  order(id: String!): Order

  """An OrderedSet"""
  ordered_set(
    """The ID of the OrderedSet"""
    id: String!
  ): OrderedSet

  """A collection of OrderedSets"""
  ordered_sets(
    """Key to the OrderedSet or group of OrderedSets"""
    key: String!
    public: Boolean = true
    page: Int = 1
    size: Int = 10
  ): [OrderedSet]

  """A Partner"""
  partner(
    """The slug or ID of the Partner"""
    id: String!
  ): Partner

  """A list of PartnerCategories"""
  partner_categories(
    category_type: CategoryType

    """Filter by whether category is internal"""
    internal: Boolean = false
    size: Int
  ): [PartnerCategory]

  """A PartnerCategory"""
  partner_category(
    """The slug or ID of the PartnerCategory"""
    id: String!
  ): PartnerCategory

  """A Partner Show"""
  partner_show(
    """The slug or ID of the PartnerShow"""
    id: String!
  ): PartnerShow

  """A list of PartnerShows"""
  partner_shows(
    at_a_fair: Boolean
    displayable: Boolean = true
    fair_id: String
    featured: Boolean

    """
    
            Only return shows matching specified ids.
            Accepts list of ids.
          
    """
    ids: [String]
    near: Near
    partner_id: String
    size: Int
    sort: PartnerShowSorts
    status: EventStatus
  ): [PartnerShow]

  """A list of Partners"""
  partners(
    default_profile_public: Boolean
    eligible_for_carousel: Boolean

    """Indicates an active subscription"""
    eligible_for_listing: Boolean

    """Indicates tier 1/2 for gallery, 1 for institution"""
    eligible_for_primary_bucket: Boolean

    """Indicates tier 3/4 for gallery, 2 for institution"""
    eligible_for_secondary_bucket: Boolean
    ids: [String]
    has_full_profile: Boolean

    """Coordinates to find partners closest to"""
    near: String
    page: Int

    """
    
            Only return partners of the specified partner categories.
            Accepts list of slugs.
          
    """
    partner_categories: [String]
    size: Int
    sort: PartnersSortType

    """term used for searching Partners"""
    term: String
    type: [PartnerClassification]
  ): [Partner]

  """A Profile"""
  profile(
    """The slug or ID of the Profile"""
    id: String!
  ): Profile

  """A Sale"""
  sale(
    """The slug or ID of the Sale"""
    id: String!
  ): Sale

  """A Sale Artwork"""
  sale_artwork(
    """The slug or ID of the SaleArtwork"""
    id: String!
  ): SaleArtwork

  """Sale Artworks search results"""
  sale_artworks(aggregations: [SaleArtworkAggregation], artist_ids: [String], include_artworks_by_followed_artists: Boolean, live_sale: Boolean, is_auction: Boolean, gene_ids: [String], estimate_range: String, page: Int, sale_id: ID, size: Int, sort: String, after: String, first: Int, before: String, last: Int): SaleArtworksConnection

  """A list of Sales"""
  sales(
    """Limit by auction."""
    is_auction: Boolean = true

    """
    
            Only return sales matching specified ids.
            Accepts list of ids.
          
    """
    ids: [String]

    """Limit by live status."""
    live: Boolean = true

    """Limit by published status."""
    published: Boolean = true
    size: Int
    sort: SaleSorts
  ): [Sale]

  """The schema for difference microservice settings"""
  services: Services

  """A Show"""
  show(
    """The slug or ID of the Show"""
    id: String!
  ): Show
  status: Status
  tag(
    """The slug or ID of the Tag"""
    id: String!
  ): Tag

  """Trending artists"""
  trending_artists(
    """
    Fetch the top artists for each metric within double the base time period
    """
    double_time_period: Boolean = false

    """Trending method"""
    method: String = "fetch"

    """Trending metric name"""
    name: TrendingMetrics!

    """Number of results to return"""
    size: Int = 40
  ): TrendingArtists
  user(
    """Email to search for user by"""
    email: String
  ): User

  """A list of Users"""
  users(ids: [String]): [User]

  """Popular artists"""
  popular_artists(
    """If true, will exclude followed artists for the user"""
    exclude_followed_artists: Boolean

    """
    Exclude these ids from results, may result in all artists being excluded.
    """
    exclude_artist_ids: [String]

    """Number of results to return"""
    size: Int
  ): PopularArtists
}
