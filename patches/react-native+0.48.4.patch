diff --git a/node_modules/react-native/Libraries/Alert/AlertIOS.js b/node_modules/react-native/Libraries/Alert/AlertIOS.js
index 4a81430..ddabfd0 100644
--- a/node_modules/react-native/Libraries/Alert/AlertIOS.js
+++ b/node_modules/react-native/Libraries/Alert/AlertIOS.js
@@ -207,11 +207,11 @@ class AlertIOS {
         'keyboardType) and the old syntax will be removed in a future version.');
 
       var callback = type;
-      var defaultValue = message;
+      var deprecateDefaultValue = message;
       RCTAlertManager.alertWithArgs({
         title: title || undefined,
         type: 'plain-text',
-        defaultValue,
+        deprecateDefaultValue,
       }, (id, value) => {
         callback(value);
       });
@@ -257,4 +257,4 @@ class AlertIOS {
   }
 }
 
-module.exports = AlertIOS;
+module.exports = AlertIOS;
\ No newline at end of file
diff --git a/node_modules/react-native/Libraries/Core/Timers/JSTimers.js b/node_modules/react-native/Libraries/Core/Timers/JSTimers.js
index 73b6c12..436f604 100644
--- a/node_modules/react-native/Libraries/Core/Timers/JSTimers.js
+++ b/node_modules/react-native/Libraries/Core/Timers/JSTimers.js
@@ -241,7 +241,7 @@ const JSTimers = {
   setTimeout: function(
     func: Function,
     duration: number,
-    ...args?: any
+    ...args: any
   ): number {
     if (__DEV__ && IS_ANDROID && duration > MAX_TIMER_DURATION_MS) {
       console.warn(
@@ -267,7 +267,7 @@ const JSTimers = {
   setInterval: function(
     func: Function,
     duration: number,
-    ...args?: any
+    ...args: any
   ): number {
     if (__DEV__ && IS_ANDROID && duration > MAX_TIMER_DURATION_MS) {
       console.warn(
@@ -290,7 +290,7 @@ const JSTimers = {
    * @param {function} func Callback to be invoked before the end of the
    * current JavaScript execution loop.
    */
-  setImmediate: function(func: Function, ...args?: any) {
+  setImmediate: function(func: Function, ...args: any) {
     const id = _allocateCallback(
       () => func.apply(undefined, args),
       'setImmediate',
diff --git a/node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableListViewDataSource.js b/node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableListViewDataSource.js
index 506b434..aff0a7b 100644
--- a/node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableListViewDataSource.js
+++ b/node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableListViewDataSource.js
@@ -7,6 +7,7 @@
  * of patent rights can be found in the PATENTS file in the same directory.
  *
  * @providesModule SwipeableListViewDataSource
+ * @flow
  */
 'use strict';
 
diff --git a/node_modules/react-native/Libraries/Interaction/PanResponder.js b/node_modules/react-native/Libraries/Interaction/PanResponder.js
index bc6774e..8149753 100644
--- a/node_modules/react-native/Libraries/Interaction/PanResponder.js
+++ b/node_modules/react-native/Libraries/Interaction/PanResponder.js
@@ -7,6 +7,7 @@
  * of patent rights can be found in the PATENTS file in the same directory.
  *
  * @providesModule PanResponder
+ * @noflow
  */
 
 'use strict';
diff --git a/node_modules/react-native/Libraries/NativeAnimation/RCTNativeAnimatedNodesManager.h b/node_modules/react-native/Libraries/NativeAnimation/RCTNativeAnimatedNodesManager.h
index 1a0b684..cb70c05 100644
--- a/node_modules/react-native/Libraries/NativeAnimation/RCTNativeAnimatedNodesManager.h
+++ b/node_modules/react-native/Libraries/NativeAnimation/RCTNativeAnimatedNodesManager.h
@@ -9,7 +9,7 @@
 
 #import <Foundation/Foundation.h>
 
-#import <RCTAnimation/RCTValueAnimatedNode.h>
+#import "RCTValueAnimatedNode.h"
 #import <React/RCTBridgeModule.h>
 #import <React/RCTUIManager.h>
 
diff --git a/node_modules/react-native/React/Base/RCTJavaScriptLoader.mm b/node_modules/react-native/React/Base/RCTJavaScriptLoader.mm
old mode 100755
new mode 100644
index cbc686d..5a25049
--- a/node_modules/react-native/React/Base/RCTJavaScriptLoader.mm
+++ b/node_modules/react-native/React/Base/RCTJavaScriptLoader.mm
@@ -244,21 +244,21 @@ static void attemptAsynchronousLoadOfBundleAtURL(NSURL *scriptURL, RCTSourceLoad
       return;
     }
 
-    // Validate that the packager actually returned javascript.
-    NSString *contentType = headers[@"Content-Type"];
-    if (![contentType isEqualToString:@"application/javascript"] &&
-        ![contentType isEqualToString:@"text/javascript"]) {
-      NSString *description = [NSString stringWithFormat:@"Expected Content-Type to be 'application/javascript' or 'text/javascript', but got '%@'.", contentType];
-      error = [NSError errorWithDomain:@"JSServer"
-                                  code:NSURLErrorCannotParseResponse
-                              userInfo:@{
-                                         NSLocalizedDescriptionKey: description,
-                                         @"headers": headers,
-                                         @"data": data
-                                         }];
-      onComplete(error, nil, 0);
-      return;
-    }
+//    // Validate that the packager actually returned javascript.
+//    NSString *contentType = headers[@"Content-Type"];
+//    if (![contentType isEqualToString:@"application/javascript"] &&
+//        ![contentType isEqualToString:@"text/javascript"]) {
+//      NSString *description = [NSString stringWithFormat:@"Expected Content-Type to be 'application/javascript' or 'text/javascript', but got '%@'.", contentType];
+//      error = [NSError errorWithDomain:@"JSServer"
+//                                  code:NSURLErrorCannotParseResponse
+//                              userInfo:@{
+//                                         NSLocalizedDescriptionKey: description,
+//                                         @"headers": headers,
+//                                         @"data": data
+//                                         }];
+//      onComplete(error, nil, 0);
+//      return;
+//    }
 
     onComplete(nil, data, data.length);
   }];
